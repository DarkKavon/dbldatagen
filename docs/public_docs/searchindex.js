Search.setIndex({"docnames": ["APIDOCS", "DATARANGES", "DISTRIBUTIONS", "extending_text_generation", "generating_cdc_data", "generating_column_data", "generating_from_existing_data", "generating_json_data", "index", "installation_notes", "license", "multi_table_data", "options_and_features", "reference/api/dbldatagen", "reference/api/dbldatagen.column_generation_spec", "reference/api/dbldatagen.column_spec_options", "reference/api/dbldatagen.constraints", "reference/api/dbldatagen.constraints.chained_relation", "reference/api/dbldatagen.constraints.constraint", "reference/api/dbldatagen.constraints.literal_range_constraint", "reference/api/dbldatagen.constraints.literal_relation_constraint", "reference/api/dbldatagen.constraints.negative_values", "reference/api/dbldatagen.constraints.positive_values", "reference/api/dbldatagen.constraints.ranged_values_constraint", "reference/api/dbldatagen.constraints.sql_expr", "reference/api/dbldatagen.constraints.unique_combinations", "reference/api/dbldatagen.data_analyzer", "reference/api/dbldatagen.data_generator", "reference/api/dbldatagen.datagen_constants", "reference/api/dbldatagen.datarange", "reference/api/dbldatagen.datasets", "reference/api/dbldatagen.datasets.basic_geometries", "reference/api/dbldatagen.datasets.basic_process_historian", "reference/api/dbldatagen.datasets.basic_telematics", "reference/api/dbldatagen.datasets.basic_user", "reference/api/dbldatagen.datasets.benchmark_groupby", "reference/api/dbldatagen.datasets.dataset_provider", "reference/api/dbldatagen.datasets.multi_table_telephony_provider", "reference/api/dbldatagen.datasets_object", "reference/api/dbldatagen.daterange", "reference/api/dbldatagen.distributions", "reference/api/dbldatagen.distributions.beta", "reference/api/dbldatagen.distributions.data_distribution", "reference/api/dbldatagen.distributions.exponential_distribution", "reference/api/dbldatagen.distributions.gamma", "reference/api/dbldatagen.distributions.normal_distribution", "reference/api/dbldatagen.function_builder", "reference/api/dbldatagen.html_utils", "reference/api/dbldatagen.nrange", "reference/api/dbldatagen.schema_parser", "reference/api/dbldatagen.spark_singleton", "reference/api/dbldatagen.text_generator_plugins", "reference/api/dbldatagen.text_generators", "reference/api/dbldatagen.utils", "reference/api/modules", "relnotes/CHANGELOG", "relnotes/CONTRIBUTING", "relnotes/quickindex", "relnotes/requirements", "repeatable_data_generation", "textdata", "troubleshooting", "using_constraints", "using_delta_live_tables", "using_standard_datasets", "using_streaming_data"], "filenames": ["APIDOCS.md", "DATARANGES.md", "DISTRIBUTIONS.md", "extending_text_generation.rst", "generating_cdc_data.rst", "generating_column_data.rst", "generating_from_existing_data.rst", "generating_json_data.rst", "index.rst", "installation_notes.rst", "license.rst", "multi_table_data.rst", "options_and_features.rst", "reference/api/dbldatagen.rst", "reference/api/dbldatagen.column_generation_spec.rst", "reference/api/dbldatagen.column_spec_options.rst", "reference/api/dbldatagen.constraints.rst", "reference/api/dbldatagen.constraints.chained_relation.rst", "reference/api/dbldatagen.constraints.constraint.rst", "reference/api/dbldatagen.constraints.literal_range_constraint.rst", "reference/api/dbldatagen.constraints.literal_relation_constraint.rst", "reference/api/dbldatagen.constraints.negative_values.rst", "reference/api/dbldatagen.constraints.positive_values.rst", "reference/api/dbldatagen.constraints.ranged_values_constraint.rst", "reference/api/dbldatagen.constraints.sql_expr.rst", "reference/api/dbldatagen.constraints.unique_combinations.rst", "reference/api/dbldatagen.data_analyzer.rst", "reference/api/dbldatagen.data_generator.rst", "reference/api/dbldatagen.datagen_constants.rst", "reference/api/dbldatagen.datarange.rst", "reference/api/dbldatagen.datasets.rst", "reference/api/dbldatagen.datasets.basic_geometries.rst", "reference/api/dbldatagen.datasets.basic_process_historian.rst", "reference/api/dbldatagen.datasets.basic_telematics.rst", "reference/api/dbldatagen.datasets.basic_user.rst", "reference/api/dbldatagen.datasets.benchmark_groupby.rst", "reference/api/dbldatagen.datasets.dataset_provider.rst", "reference/api/dbldatagen.datasets.multi_table_telephony_provider.rst", "reference/api/dbldatagen.datasets_object.rst", "reference/api/dbldatagen.daterange.rst", "reference/api/dbldatagen.distributions.rst", "reference/api/dbldatagen.distributions.beta.rst", "reference/api/dbldatagen.distributions.data_distribution.rst", "reference/api/dbldatagen.distributions.exponential_distribution.rst", "reference/api/dbldatagen.distributions.gamma.rst", "reference/api/dbldatagen.distributions.normal_distribution.rst", "reference/api/dbldatagen.function_builder.rst", "reference/api/dbldatagen.html_utils.rst", "reference/api/dbldatagen.nrange.rst", "reference/api/dbldatagen.schema_parser.rst", "reference/api/dbldatagen.spark_singleton.rst", "reference/api/dbldatagen.text_generator_plugins.rst", "reference/api/dbldatagen.text_generators.rst", "reference/api/dbldatagen.utils.rst", "reference/api/modules.rst", "relnotes/CHANGELOG.md", "relnotes/CONTRIBUTING.md", "relnotes/quickindex.rst", "relnotes/requirements.md", "repeatable_data_generation.rst", "textdata.rst", "troubleshooting.rst", "using_constraints.rst", "using_delta_live_tables.rst", "using_standard_datasets.rst", "using_streaming_data.rst"], "titles": ["Getting Started with the Databricks Labs Data Generator", "Understanding and Using Data Ranges", "Generating Data that Conforms to a Known Statistical Distribution", "Extending Text Generation", "Generating Change Data Capture Data", "Generating Column Data", "Generating Synthetic Data from Existing Data or Schema (Experimental)", "Generating JSON and Structured Column Data", "Databricks Labs Data Generator Documentation", "Installation Notes", "License", "Generating and Using Data with Multiple Tables", "Options and Additional Features", "dbldatagen package", "dbldatagen.column_generation_spec module", "dbldatagen.column_spec_options module", "dbldatagen.constraints package", "dbldatagen.constraints.chained_relation module", "dbldatagen.constraints.constraint module", "dbldatagen.constraints.literal_range_constraint module", "dbldatagen.constraints.literal_relation_constraint module", "dbldatagen.constraints.negative_values module", "dbldatagen.constraints.positive_values module", "dbldatagen.constraints.ranged_values_constraint module", "dbldatagen.constraints.sql_expr module", "dbldatagen.constraints.unique_combinations module", "dbldatagen.data_analyzer module", "dbldatagen.data_generator module", "dbldatagen.datagen_constants module", "dbldatagen.datarange module", "dbldatagen.datasets package", "dbldatagen.datasets.basic_geometries module", "dbldatagen.datasets.basic_process_historian module", "dbldatagen.datasets.basic_telematics module", "dbldatagen.datasets.basic_user module", "dbldatagen.datasets.benchmark_groupby module", "dbldatagen.datasets.dataset_provider module", "dbldatagen.datasets.multi_table_telephony_provider module", "dbldatagen.datasets_object module", "dbldatagen.daterange module", "dbldatagen.distributions package", "dbldatagen.distributions.beta module", "dbldatagen.distributions.data_distribution module", "dbldatagen.distributions.exponential_distribution module", "dbldatagen.distributions.gamma module", "dbldatagen.distributions.normal_distribution module", "dbldatagen.function_builder module", "dbldatagen.html_utils module", "dbldatagen.nrange module", "dbldatagen.schema_parser module", "dbldatagen.spark_singleton module", "dbldatagen.text_generator_plugins module", "dbldatagen.text_generators module", "dbldatagen.utils module", "dbldatagen", "Databricks Labs Synthetic Data Generator Release Notes", "Contributing to the Databricks Labs Data Generator", "Quick API Index", "Dependencies for the Data Generator framework", "Repeatable Data Generation", "Generating and Manipulating Text Data", "Troubleshooting", "Using Constraints to control data generation", "Using the Data Generator with Delta Live Tables", "Quick and easy dataset generation with Standard Datasets (Experimental)", "Using Streaming Data"], "terms": {"The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "aka": 0, "dbldatagen": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 55, 56, 59, 60, 61, 62, 63, 64, 65], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65], "base": [0, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 61, 63, 64, 65], "solut": 0, "realist": 0, "It": [0, 1, 3, 5, 7, 14, 27, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 52, 53, 60, 63], "featur": [0, 3, 4, 5, 9, 14, 31, 32, 33, 34, 35, 36, 37, 53, 59, 63, 65], "As": [0, 1, 3, 4, 5, 6, 7, 8, 11, 15, 31, 32, 33, 34, 35, 38, 42, 47, 52, 60, 63, 64, 65], "process": [0, 3, 5, 6, 9, 11, 12, 16, 27, 31, 51, 52, 55, 56, 59, 61], "produc": [0, 1, 5, 11, 12, 14, 25, 27, 31, 32, 33, 34, 35, 36, 37, 41, 53, 59, 60, 61, 62, 63, 64, 65], "popul": [0, 7, 15, 27, 29, 36, 48], "mai": [0, 1, 3, 5, 6, 7, 9, 10, 12, 14, 15, 16, 18, 25, 27, 36, 37, 38, 42, 48, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65], "written": [0, 4, 7, 59], "storag": [0, 7], "variou": [0, 3, 5, 12, 52, 56], "format": [0, 3, 4, 6, 7, 11, 12, 27, 39, 47, 53, 55, 59, 61, 65], "save": [0, 3, 4, 7], "tabl": [0, 3, 9, 12, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 49, 55, 59, 60], "manipul": [0, 38], "api": [0, 26, 38, 62], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 48, 51, 55, 56, 59, 60, 61, 62, 63, 64, 65], "also": [0, 4, 5, 7, 8, 12, 26, 27, 36, 38, 49, 56, 60, 61, 63, 64], "sourc": [0, 3, 4, 6, 10, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60, 65], "delta": [0, 3, 4, 7, 8, 9, 12, 27, 55, 59, 61], "live": [0, 8, 9, 55], "pipelin": [0, 9, 63], "support": [0, 2, 5, 7, 9, 14, 17, 18, 36, 37, 38, 51, 53, 55, 62, 64], "stream": [0, 4, 5, 8, 18, 25, 27, 31, 32, 33, 34, 35, 36, 38, 55, 62, 63, 64], "batch": [0, 5, 12, 25, 27, 36, 51, 63], "oper": [0, 4, 11, 17, 20, 25, 26, 35, 36, 38, 59, 63], "ha": [0, 5, 7, 11, 12, 15, 17, 18, 21, 22, 27, 48, 52, 55, 56, 59, 60, 61, 63], "depend": [0, 5, 12, 14, 27, 52, 53, 55, 59, 65], "ani": [0, 1, 2, 3, 5, 7, 9, 10, 11, 13, 14, 15, 25, 27, 31, 32, 33, 34, 35, 36, 38, 49, 53, 56, 59, 62, 63, 65], "librari": [0, 9, 13, 16, 28, 40, 51, 53, 55, 56, 59, 63], "alreadi": [0, 53, 58, 59], "instal": [0, 3, 8, 55, 56, 58], "runtim": [0, 52, 53, 55, 56, 58, 60], "you": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 27, 31, 32, 33, 34, 35, 37, 48, 51, 55, 56, 59, 60, 61, 62, 63, 64, 65], "scala": [0, 8, 53], "r": [0, 4, 5, 6, 7, 8, 11, 12, 52, 60, 61, 62], "other": [0, 1, 5, 7, 10, 12, 13, 27, 37, 38, 41, 43, 47, 52, 56, 59, 61, 62, 63, 64], "languag": 0, "defin": [0, 5, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53], "view": [0, 2, 8, 10, 27, 63], "over": [0, 6, 8, 12, 37, 38, 53, 63, 64], "billion": [0, 36], "row": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 16, 17, 27, 31, 32, 33, 34, 35, 36, 37, 38, 51, 52, 59, 60, 61, 62, 63, 65], "minut": [0, 1, 6, 7, 11, 59, 61, 62], "reason": 0, "size": [0, 3, 11, 31, 32, 33, 34, 35, 36, 37, 38, 48, 51, 52, 64], "cluster": [0, 3, 9], "For": [0, 1, 2, 3, 5, 6, 7, 9, 11, 12, 14, 15, 16, 17, 25, 26, 27, 36, 37, 38, 42, 48, 53, 55, 56, 59, 60, 61, 62, 63, 64], "time": [0, 1, 2, 5, 6, 10, 11, 12, 14, 17, 26, 27, 32, 33, 53, 57, 59, 65], "write": [0, 1, 3, 4, 27, 63, 65], "version": [0, 3, 6, 9, 11, 26, 27, 36, 42, 46, 52, 56, 58], "list": [0, 2, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 36, 38, 46, 49, 51, 52, 53, 55, 59, 61], "later": [0, 3, 5, 11, 14, 27, 51, 55, 56, 58, 59], "document": [0, 5, 7, 9, 10, 15, 36, 37, 55, 58, 60, 62, 64], "under": [0, 6, 56], "2": [0, 2, 6, 9, 11, 12, 15, 19, 23, 31, 53, 56, 58, 60, 63, 64], "12": [0, 1, 6, 7, 11, 15, 35, 36, 39, 55, 56, 59, 61, 62], "node": [0, 3], "x": [0, 7, 12, 36, 38, 52, 53, 59, 60, 61, 65], "8": [0, 3, 4, 7, 11, 48, 55, 56, 58, 59, 61, 62, 65], "core": [0, 50], "dbr": 0, "3": [0, 1, 2, 7, 9, 11, 15, 27, 46, 56, 58, 59, 61, 63, 65], "note": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 19, 23, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 39, 42, 48, 51, 53, 59, 61, 65], "markup": [0, 63], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65], "doe": [0, 1, 3, 5, 6, 27, 31, 32, 33, 34, 35, 36, 39, 47, 51, 53, 55, 59, 60], "cover": [0, 10, 60], "all": [0, 1, 4, 5, 7, 9, 10, 11, 12, 15, 17, 25, 27, 29, 36, 38, 39, 42, 46, 48, 49, 50, 52, 53, 55, 58, 59, 60, 62, 63, 64, 65], "class": [0, 3, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60, 61, 64], "method": [0, 3, 5, 6, 7, 9, 11, 12, 14, 15, 18, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 49, 51, 52, 53, 55, 56, 59, 60, 63, 64, 65], "codebas": 0, "some": [0, 1, 3, 4, 5, 6, 7, 12, 16, 36, 42, 49, 52, 58, 59, 60, 61], "link": [0, 5, 9, 12, 63], "work": [0, 3, 9, 10, 11, 15, 49, 56], "To": [0, 2, 3, 4, 5, 7, 9, 11, 27, 49, 55, 56, 59, 60, 61, 63, 64], "see": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 27, 37, 41, 43, 44, 49, 53, 55, 56, 60, 61, 63, 64], "latest": [0, 9, 32, 33, 63], "releas": [0, 7, 27, 56], "onlin": [0, 15, 60], "python": [0, 9, 27, 39, 46, 51, 53, 55, 58, 61, 63], "sever": [0, 5, 7, 16, 37, 64], "differ": [0, 1, 5, 11, 12, 15, 27, 35, 37, 38, 42, 55, 59, 60, 61, 62, 63], "wai": [0, 1, 8, 11, 16, 60, 62, 63, 64], "advanc": [0, 6], "accord": [0, 1, 10, 12, 59], "specifi": [0, 1, 2, 3, 4, 5, 7, 11, 12, 14, 15, 25, 27, 36, 37, 38, 39, 41, 43, 44, 48, 51, 52, 55, 59, 60, 61, 64, 65], "provid": [0, 3, 4, 5, 6, 7, 8, 10, 14, 18, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 42, 51, 52, 53, 59, 60, 64], "add": [0, 1, 2, 4, 5, 9, 10, 27, 31, 32, 33, 34, 35, 47, 53, 59, 65], "along": [0, 6, 38, 63], "specif": [0, 1, 2, 5, 6, 8, 9, 10, 11, 14, 15, 17, 26, 27, 31, 32, 33, 34, 35, 36, 38, 42, 44, 46, 51, 53, 55, 56, 59, 61, 62, 64, 65], "how": [0, 3, 5, 7, 8, 9, 12, 14, 15, 49, 51, 52, 60, 61, 65], "valu": [0, 2, 3, 4, 5, 6, 11, 14, 15, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 61, 63, 64, 65], "ar": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 19, 23, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 48, 49, 51, 53, 55, 56, 58, 59, 60, 64, 65], "standard": [0, 8, 11, 36, 38, 39, 45, 55, 57, 61], "dataset": [0, 6, 8, 11, 13, 27, 38, 54, 55, 62], "minim": [0, 38], "effort": 0, "includ": [0, 3, 5, 6, 9, 10, 16, 17, 36, 53, 55, 59, 60, 61, 62], "follow": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 15, 27, 31, 32, 33, 34, 35, 37, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "number": [0, 1, 2, 3, 5, 7, 11, 12, 15, 16, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 48, 49, 51, 52, 53, 55, 58, 59, 60, 62, 64], "partit": [0, 1, 3, 4, 5, 7, 11, 12, 27, 31, 32, 33, 34, 35, 36, 37, 38, 59, 60, 61, 62, 63, 65], "distribut": [0, 4, 6, 8, 10, 11, 12, 13, 14, 15, 27, 46, 54, 55, 56, 62], "across": [0, 3, 11, 25, 42], "numer": [0, 2, 12, 14, 15, 41, 42, 43, 48, 57, 59, 60], "date": [0, 2, 6, 12, 14, 15, 39, 49, 57, 59, 63], "rang": [0, 2, 5, 8, 11, 12, 14, 15, 19, 23, 29, 39, 42, 48, 52, 55, 57, 59, 60], "random": [0, 1, 2, 4, 5, 6, 7, 11, 13, 14, 15, 27, 31, 32, 33, 34, 35, 37, 41, 42, 43, 44, 45, 51, 52, 55, 61, 62, 63, 65], "seed": [0, 1, 2, 5, 11, 12, 14, 15, 27, 37, 42, 44, 45, 51, 52, 55, 59], "one": [0, 5, 7, 9, 11, 14, 15, 17, 20, 25, 27, 31, 37, 38, 50, 51, 53, 59, 63, 64], "option": [0, 1, 2, 4, 5, 7, 8, 13, 14, 15, 18, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 49, 52, 55, 57, 59, 61, 62, 63, 65], "weight": [0, 2, 5, 7, 11, 12, 15, 46, 55, 57, 59, 60, 61, 62, 63, 65], "frequent": [0, 2, 11], "occur": [0, 11, 55, 59], "templat": [0, 4, 5, 6, 7, 11, 12, 13, 15, 52, 55, 59, 60, 61, 62], "text": [0, 4, 8, 10, 11, 12, 14, 15, 33, 37, 47, 51, 52, 53, 55, 56, 57, 59], "string": [0, 2, 3, 5, 6, 7, 11, 12, 14, 15, 17, 21, 22, 24, 25, 26, 27, 31, 36, 39, 47, 49, 51, 52, 53, 59, 60, 61, 62, 63, 65], "express": [0, 4, 5, 6, 7, 10, 12, 14, 15, 18, 19, 24, 27, 36, 38, 42, 46, 49, 55, 57, 59, 61, 62], "control": [0, 1, 5, 7, 8, 14, 15, 27, 52, 53, 59, 61, 65], "augment": 0, "script": [0, 4, 27, 55], "creation": [0, 4, 5, 12, 36, 38, 51, 59, 61, 63], "statement": [0, 4, 10, 14, 15, 27, 49, 53, 55, 59], "statist": [0, 12, 41, 42, 43, 44, 45, 62], "within": [0, 8, 9, 10, 25, 35, 38, 47, 56, 63], "synthes": [0, 38], "uniti": [0, 55], "catalog": [0, 4, 11, 55], "enabl": [0, 2, 4, 5, 11, 47], "pluggabl": [0, 64], "quick": [0, 8, 38], "10": [0, 1, 2, 3, 4, 6, 7, 11, 12, 27, 32, 36, 51, 55, 58, 61, 62, 63, 64, 65], "4": [0, 1, 3, 5, 7, 11, 12, 36, 48, 58, 60, 61, 63], "lt": [0, 55, 56], "abov": [0, 7, 16, 37, 55, 63], "13": 0, "recommend": [0, 5, 9, 25, 27, 55, 56], "ml": [0, 6, 64], "mode": [0, 3, 5, 7, 55], "singl": [0, 12, 14, 27, 38, 51, 52, 53], "user": [0, 3, 6, 7, 12, 36, 47, 59, 61, 64, 65], "No": [0, 48], "isol": 0, "share": [0, 3, 27, 55], "9": [0, 1, 7, 12, 48, 52, 55, 56, 58, 59, 60, 61, 65], "1": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 56, 58, 59, 60, 61, 62, 63], "In": [0, 1, 2, 3, 5, 7, 9, 10, 27, 46, 52, 59, 60, 61, 64, 65], "github": [0, 9, 37, 55, 56], "project": [0, 8, 49, 56], "directori": [0, 56], "folder": [0, 55], "run": [0, 11, 12, 50, 59, 61, 63, 64, 65], "directli": [0, 9, 12, 14, 29, 56], "import": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 51, 56, 59, 60, 61, 62, 63, 64, 65], "notebook": [0, 3, 8, 9, 26, 27, 47, 55, 56, 61, 65], "export": 0, "workspac": [0, 3, 9, 50, 56], "framework": [0, 4, 9, 11, 55, 56, 60, 64], "onc": [0, 5, 37, 51, 63, 64], "frame": [0, 5, 6, 8, 12, 62, 64, 65], "persist": 0, "analyz": [0, 26], "extern": [0, 4, 27, 51], "databas": 0, "same": [0, 3, 5, 7, 11, 14, 15, 27, 51, 52, 55, 59, 60, 61, 62, 63, 65], "manner": 0, "regular": [0, 8, 9, 38, 60, 61, 63], "pyspark": [0, 1, 2, 4, 7, 8, 11, 12, 18, 19, 26, 27, 42, 49, 55, 56, 58, 59, 60, 61, 65], "consum": [0, 25], "result": [0, 7, 11, 12, 14, 15, 26, 27, 49, 53, 56, 59, 60, 61, 62], "By": [0, 1, 2, 3, 5, 7, 8, 9, 11, 12, 27, 36, 38, 41, 50, 52, 59, 61], "appropri": [0, 2, 7, 9, 14], "paramet": [0, 3, 5, 6, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62, 63, 64], "instruct": [0, 3, 8, 14], "automat": [0, 10, 14, 15, 27, 31, 32, 33, 34, 35, 36, 37, 38, 56, 60, 61, 64], "regist": [0, 36, 38, 64], "part": [0, 1, 3, 4, 7, 10, 25, 27, 36, 37, 39, 42, 48, 59, 60, 65], "spec": [0, 8, 14, 15, 26, 27, 53, 57, 59, 61, 62, 65], "which": [0, 4, 5, 10, 12, 27, 36, 37, 38, 50, 51, 53, 55, 59, 60, 61, 62], "implicitli": [0, 4, 62], "object": [0, 1, 3, 5, 7, 10, 12, 14, 15, 18, 19, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 38, 39, 42, 46, 47, 48, 49, 50, 51, 52, 59, 60, 62, 64], "each": [0, 1, 3, 5, 7, 11, 12, 14, 17, 25, 27, 31, 36, 37, 38, 42, 53, 55, 59, 63], "deriv": [0, 6, 10, 12, 15, 27, 36, 59, 63, 64], "its": [0, 1, 5, 10, 27, 29, 52, 59, 60, 61], "default": [0, 1, 2, 3, 5, 7, 9, 11, 12, 14, 15, 18, 19, 23, 25, 27, 29, 31, 34, 36, 37, 38, 41, 47, 48, 50, 51, 52, 53, 55, 59, 60, 61, 64], "id": [0, 4, 5, 6, 7, 11, 12, 14, 15, 25, 27, 32, 33, 34, 49, 53, 55, 59, 65], "field": [0, 1, 2, 4, 5, 12, 14, 15, 27, 32, 49, 55, 61, 65], "rate": [0, 6, 11, 27, 40, 43, 65], "hash": [0, 4, 5, 7, 11, 12, 15, 61, 62, 65], "further": [0, 1, 5, 26, 27, 31, 32, 33, 34, 35, 38, 42, 49, 64, 65], "particular": [0, 2, 10, 64], "seri": [0, 11, 32, 33, 41, 43, 44, 45, 51, 52, 63], "transform": [0, 5, 7, 12, 18, 25, 59, 61, 62], "typic": [0, 6, 9, 14], "map": [0, 7, 27, 49, 55, 64], "discret": [0, 2, 12, 15, 29, 39, 48, 59, 60], "arithmet": [0, 59], "There": [0, 3, 7, 11, 51, 60], "appli": [0, 1, 4, 5, 10, 11, 12, 21, 22, 25, 27, 36, 38, 51, 52, 55, 59, 60, 62, 65], "arbitrari": [0, 3, 7, 12, 51, 59, 60, 61], "common": [0, 6, 11, 12, 38, 49, 55, 64], "befor": [0, 2, 5, 11, 38, 39, 62], "need": [0, 3, 5, 6, 9, 11, 12, 25, 27, 36, 37, 41, 42, 51, 56, 60, 61, 63, 64, 65], "packag": [0, 8, 9, 49, 53, 54, 55, 58, 64], "your": [0, 6, 9, 10, 27, 55, 63, 65], "pypi": [0, 49, 55, 56], "when": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 18, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 51, 52, 55, 56, 59, 60, 61, 62, 64, 65], "pip": [0, 3, 8, 9, 55, 56, 63], "command": [0, 9, 27, 56, 63], "cell": [0, 3, 9, 56, 63, 65], "scope": [0, 9, 10, 56], "execut": [0, 3, 4, 5, 9, 11, 14, 36, 37, 48, 56, 61, 65], "commun": [0, 9, 56], "find": [0, 13, 27, 38, 49, 53, 63, 64], "detail": [0, 5, 7, 9, 11, 36, 49, 55, 60], "altern": [0, 5, 7, 12, 15, 42, 48, 56, 61], "locat": [0, 4, 9, 10, 27, 33, 38], "dg": [0, 1, 2, 4, 5, 6, 7, 11, 12, 56, 59, 60, 61, 62, 63, 64, 65], "perform": [0, 3, 4, 5, 11, 25, 26, 37, 38, 43, 44, 51, 53, 55, 56, 61, 62], "definit": [0, 5, 6, 7, 10, 14, 15, 27, 36, 38, 49, 55, 59, 61, 62, 64], "via": [0, 1, 8, 9, 27, 36, 38, 51, 55, 56, 59, 60, 61, 63, 64], "datagener": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 18, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 48, 54, 57, 59, 60, 62, 63, 65], "instanc": [0, 3, 5, 6, 7, 12, 14, 15, 18, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 45, 48, 49, 50, 51, 56, 59, 60, 61, 64], "rule": [0, 7, 11, 12, 18, 25, 27, 51, 59], "predefin": [0, 16, 18, 36, 59, 64], "point": [0, 11, 13, 26, 27, 31, 36, 52, 56, 57, 64], "mechan": [0, 1, 3, 42, 49, 51, 56, 59, 64], "If": [0, 1, 3, 5, 6, 7, 9, 10, 12, 14, 15, 19, 23, 25, 26, 27, 34, 36, 38, 39, 42, 50, 51, 52, 56, 59, 60, 61, 62, 65], "withcolumnspec": [0, 5, 12, 13, 14, 15, 27, 53, 55, 65], "new": [0, 4, 5, 9, 15, 27, 42, 50, 51, 55, 59, 64, 65], "should": [0, 2, 3, 4, 5, 7, 14, 15, 17, 18, 20, 25, 27, 36, 38, 41, 42, 43, 47, 49, 51, 53, 56, 62, 64], "withcolumn": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 27, 48, 51, 53, 55, 59, 60, 61, 62, 63, 65], "name": [0, 1, 2, 3, 4, 5, 6, 7, 12, 14, 15, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 49, 51, 52, 53, 55, 56, 60, 62, 63, 64, 65], "case": [0, 1, 3, 4, 5, 6, 7, 9, 11, 12, 27, 46, 50, 52, 56, 59, 60, 61, 64, 65], "insensit": [0, 5], "henc": [0, 25], "succe": 0, "potenti": [0, 36, 53], "caus": [0, 5, 7, 10, 53, 59], "error": [0, 5, 7, 14, 15, 31, 32, 33, 34, 35, 36, 37, 53, 55, 59, 61, 65], "necessari": [0, 14, 34, 56, 61], "type": [0, 1, 2, 5, 7, 11, 12, 14, 15, 18, 27, 29, 35, 36, 39, 46, 48, 49, 52, 55, 59, 60, 65], "custom": [0, 4, 5, 7, 18, 27, 34, 37, 38, 51, 55, 62], "here": [0, 1, 2, 4, 7, 8, 9, 11, 59, 60, 63, 65], "floattyp": [0, 7, 12, 65], "integertyp": [0, 1, 2, 7, 12, 15, 59, 65], "stringtyp": [0, 1, 7, 12, 15, 27, 59, 61, 65], "row_count": [0, 1, 2, 12], "1000": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 33, 37, 61, 62, 64], "100": [0, 1, 2, 3, 7, 11, 12, 32, 35, 36, 37, 38, 59, 64], "column_count": [0, 7, 30, 31, 32, 33, 34, 35], "testdataspec": [0, 1, 2, 7, 27, 59, 61, 63, 65], "test_data_set1": [0, 1, 2, 7, 12, 60], "withidoutput": [0, 1, 7, 12, 13, 27, 59, 60, 65], "expr": [0, 1, 2, 4, 5, 6, 7, 11, 12, 13, 14, 15, 24, 27, 42, 55, 59, 60, 61, 63, 65], "floor": [0, 1, 7, 65], "rand": [0, 1, 4, 7, 42, 59, 65], "350": [0, 7, 65], "86400": [0, 7, 65], "3600": [0, 7, 65], "numcolumn": [0, 7, 12, 13, 14, 15], "code1": [0, 7, 12], "minvalu": [0, 1, 2, 4, 6, 7, 11, 12, 14, 15, 27, 39, 48, 59, 61, 62, 65], "maxvalu": [0, 1, 2, 4, 6, 7, 11, 12, 14, 15, 27, 39, 48, 59, 62, 63, 65], "200": [0, 7, 12, 27, 55, 65], "code2": [0, 7, 12], "integ": [0, 7, 12, 15, 27, 42, 48, 49, 53, 65], "0": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 27, 32, 33, 35, 39, 41, 42, 43, 44, 45, 48, 52, 56, 58, 59, 60, 62, 65], "true": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 18, 19, 21, 22, 23, 26, 27, 31, 32, 33, 34, 35, 36, 38, 42, 48, 50, 51, 52, 53, 60, 61, 62, 63, 64, 65], "code3": [0, 7, 12, 60], "offlin": [0, 15, 60], "unknown": [0, 1, 15, 60, 65], "code4": [0, 7, 12, 60], "b": [0, 12, 15, 17, 49, 60], "c": [0, 12, 15, 17, 27, 49, 53, 60, 65], "percentnul": [0, 1, 3, 4, 5, 7, 12, 15, 35, 59, 60, 62], "05": [0, 11, 60, 62], "code5": [0, 7, 12, 60], "dftestdata": [0, 1, 2, 7, 12, 27, 59, 61, 63], "retain": [0, 10, 53, 59], "output": [0, 3, 5, 6, 7, 11, 12, 14, 15, 17, 25, 26, 27, 29, 39, 47, 48, 53, 59, 60, 65], "call": [0, 3, 5, 14, 27, 36, 37, 51, 53, 59, 63, 64], "dure": [0, 3, 5, 27, 36, 61], "drop": [0, 4, 14, 25, 36, 59], "final": [0, 2, 3, 5, 7, 12, 14, 25, 27, 59, 62, 65], "introduc": [0, 2, 11, 59], "show": [0, 3, 4, 7, 11, 12, 26, 61, 62, 65], "label": [0, 55], "r1": 0, "rn": [0, 63], "determin": [0, 1, 3, 5, 6, 12, 15, 36, 37, 51, 52, 55, 59, 60, 62, 64], "we": [0, 1, 2, 3, 4, 5, 6, 7, 11, 27, 42, 46, 55, 56, 59, 60, 61, 62, 63, 65], "refer": [0, 3, 5, 9, 12, 27, 49, 51, 53, 55, 59, 63], "preced": [0, 52, 60], "between": [0, 10, 12, 15, 19, 23, 39, 41, 42, 43, 44, 45, 52, 60], "inclus": [0, 48, 52, 60], "These": [0, 4, 5, 36, 37, 38, 53, 56, 60, 61, 62, 64], "comput": [0, 1, 2, 5, 12, 14, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 53, 55, 59, 62, 63], "modulo": [0, 59], "uniformli": 0, "place": [0, 3, 7, 12, 15, 18, 27, 56, 62], "unless": [0, 1, 12, 15, 39, 51, 53, 59], "either": [0, 5, 7, 8, 9, 12, 15, 27, 36, 59, 60, 61], "allow": [0, 1, 3, 5, 15, 27, 36, 38, 49, 51, 52, 55, 59, 60, 61, 63, 64], "respons": [0, 3, 31, 32, 33, 34, 35, 36, 37], "ensur": [0, 1, 2, 7, 11, 12, 13, 21, 22, 25, 29, 53, 54, 57, 59, 61, 65], "But": [0, 3, 56, 59, 60], "give": [0, 10, 11, 15, 53], "5": [0, 7, 11, 12, 34, 36, 48, 56, 58, 63], "chanc": 0, "null": [0, 1, 5, 7, 12, 14, 15, 35, 55, 59, 62], "being": [0, 2, 4, 5, 11, 27, 31, 32, 33, 34, 35, 36, 51, 59, 61, 62], "so": [0, 1, 2, 5, 6, 7, 10, 11, 12, 17, 20, 27, 31, 32, 33, 34, 35, 41, 47, 49, 51, 55, 56, 59, 60, 61, 63, 64, 65], "current": [0, 7, 9, 16, 27, 49, 61], "reserv": [0, 49, 61], "system": [0, 11, 15, 36, 51, 53], "manual": [0, 26, 36], "interfer": 0, "fix": [0, 5, 9, 12, 14, 27], "forthcom": [0, 9], "what": [0, 3, 4, 5, 11, 36, 51, 59, 60, 64], "want": [0, 4, 6, 7, 11, 27, 59, 60, 65], "conform": [0, 6, 14, 15, 18, 25, 52, 60, 62], "take": [0, 1, 5, 7, 11, 14, 27, 31, 32, 33, 34, 35, 36, 42, 53, 61], "explicit": [0, 1, 2, 4, 27, 29, 55, 59], "would": [0, 7, 25, 31, 32, 33, 34, 35, 36, 38, 52, 60, 63], "instead": [0, 11, 15, 27, 52, 55], "illustr": [0, 1, 3, 6, 7, 11, 12, 60, 63], "structtyp": [0, 5, 6, 7, 12, 13, 14, 15, 26, 27, 55, 65], "structfield": [0, 7, 65], "shuffle_partitions_request": [0, 3, 4, 11, 59], "partitions_request": [0, 3, 4, 11, 59, 65], "data_row": [0, 3, 4, 7, 11, 59, 61, 62, 65], "10000000": [0, 12, 62], "test_vehicle_data": 0, "serial_numb": [0, 12], "license_pl": [0, 12], "email": [0, 3, 4, 5, 7, 11, 12, 34, 56, 60, 61, 62], "table_schema": 0, "print": [0, 4, 6, 11, 26], "withschema": [0, 5, 13, 27, 65], "01": [0, 1, 2, 4, 5, 6, 7, 11, 12, 32, 33, 59, 61, 62, 63], "w": [0, 4, 5, 6, 7, 11, 12, 52, 60, 61, 62], "1000000": [0, 1, 2, 4, 6, 7, 11, 12, 27, 31, 33, 59, 61, 62, 63], "prefix": [0, 3, 11, 12, 13, 14, 15, 27, 59, 60, 62, 63, 64, 65], "dr": [0, 12, 62], "com": [0, 4, 5, 7, 9, 10, 11, 12, 55, 56, 60, 61, 62], "n": [0, 4, 11, 12, 15, 50, 52, 59, 60], "df1": [0, 3, 4, 61, 62], "overwrit": [0, 3, 4, 7, 36], "saveast": 0, "address": [0, 3, 12, 34, 62], "vin": [0, 52, 60], "etc": [0, 3, 6, 12, 14, 17, 25, 27, 36, 37, 49, 51, 59, 63], "larg": [0, 2, 8, 11, 36], "unwieldi": 0, "everi": [0, 1, 51, 59], "allevi": 0, "bulk": [0, 5, 27], "pattern": [0, 5, 11, 27, 38, 59, 60, 64], "datatyp": [0, 5, 13, 14, 15, 27, 46, 49], "overrid": [0, 4, 5, 7, 27, 36, 59], "_id": [0, 27, 61], "matchtyp": [0, 27], "010d": 0, "123": 0, "step": [0, 1, 6, 7, 9, 11, 12, 13, 14, 15, 27, 39, 48, 59, 62, 65], "prototyp": 0, "dfsourc": [0, 6], "read": [0, 4, 6, 60, 63], "parquet": [0, 6], "load": [0, 4, 6, 51, 56], "tmp": [0, 3, 4, 6, 7, 12, 65], "dataanalyz": [0, 6, 13, 26, 54, 55, 57], "sparksess": [0, 5, 6, 7, 12, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 49, 60], "df": [0, 5, 6, 7, 12, 26, 60, 61, 64, 65], "df_source_data": [0, 6], "generatedcod": [0, 6], "scriptdatageneratorfromdata": [0, 6, 13, 26], "section": [0, 2, 4, 7, 11, 47, 59, 64], "style": [0, 4, 8, 11, 27, 52, 55, 59, 64], "consist": [0, 5, 11], "event": [0, 10, 37, 59, 63], "properti": [0, 3, 5, 14, 15, 18, 27, 29, 41, 42, 43, 44, 51, 52, 59], "remain": [0, 38, 59], "longtyp": [0, 7, 59, 65], "device_popul": [0, 7, 59, 61, 65], "100000": [0, 3, 6, 7, 12, 34, 36, 59, 60, 61, 65], "20": [0, 11, 37, 59, 63, 65], "conf": [0, 3, 4, 11, 59], "shuffl": [0, 3, 4, 11, 59], "country_cod": [0, 7, 59, 61, 65], "cn": [0, 7, 59, 61, 65], "u": [0, 7, 11, 51, 59, 60, 61, 65], "fr": [0, 7, 59, 61, 65], "ca": [0, 7, 59, 61, 65], "IN": [0, 7, 10, 59, 61, 65], "jm": [0, 7, 59, 61, 65], "ie": [0, 7, 38, 59, 61, 65], "pk": [0, 7, 59, 61, 65], "gb": [0, 7, 59, 61, 65], "il": [0, 7, 59, 61, 65], "au": [0, 7, 59, 61, 65], "sg": [0, 7, 59, 61, 65], "e": [0, 5, 7, 15, 25, 26, 27, 29, 36, 39, 48, 55, 56, 59, 61, 65], "ge": [0, 7, 59, 61, 65], "mx": [0, 7, 59, 61, 65], "et": [0, 7, 59, 61, 65], "sa": [0, 7, 59, 61, 65], "lb": [0, 7, 59, 61, 65], "nl": [0, 7, 59, 61, 65], "country_weight": [0, 7, 59, 61, 65], "1300": [0, 7, 59, 61, 65], "365": [0, 7, 59, 61, 65], "67": [0, 7, 59, 61, 65], "38": [0, 7, 59, 61, 65], "7": [0, 1, 7, 11, 55, 56, 58, 59, 61, 65], "212": [0, 7, 59, 61, 65], "25": [0, 7, 59, 61, 65], "6": [0, 5, 6, 7, 12, 33, 46, 58, 59, 60, 61, 63, 65], "47": [0, 7, 59, 61, 65], "83": [0, 7, 59, 61, 65], "126": [0, 7, 59, 61, 65], "109": [0, 7, 59, 61, 65], "58": [0, 7, 59, 61, 65], "17": [0, 7, 59, 61, 65], "manufactur": [0, 7, 59, 61, 65], "corp": [0, 7, 59, 61, 65], "xyzzi": [0, 7, 59, 61, 65], "inc": [0, 7, 10, 59, 61, 65], "lakehous": [0, 7, 59, 61, 65], "ltd": [0, 7, 59, 61, 65], "acm": [0, 7, 59, 61, 65], "embank": [0, 7, 59, 61, 65], "line": [0, 7, 9, 11, 47, 59, 61, 63, 65], "gadget": [0, 7, 59, 61, 65], "droid": [0, 7, 59, 61, 65], "device_data_set": [0, 7, 59, 61, 65], "ll": [0, 4, 7, 11, 59, 61, 62, 65], "avoid": [0, 7, 11, 49, 59, 60, 61, 65], "increment": [0, 1, 7, 59, 61, 65], "sequenc": [0, 5, 7, 11, 39, 48, 53, 59, 60, 61, 65], "internal_device_id": [0, 7, 59, 61, 65], "long": [0, 4, 7, 10, 11, 12, 48, 49, 53, 59, 61, 65], "0x1000000000000": [0, 7, 59, 61, 65], "uniquevalu": [0, 1, 2, 4, 7, 11, 12, 15, 59, 61, 65], "omit": [0, 2, 4, 5, 7, 11, 12, 14, 15, 25, 27, 59, 61, 63, 65], "basecolumntyp": [0, 4, 5, 7, 11, 15, 59, 61, 62, 65], "must": [0, 5, 7, 10, 11, 19, 21, 22, 23, 38, 49, 52, 55, 59, 60, 61, 63, 65], "lx": [0, 7, 59, 61, 65], "underli": [0, 1, 2, 3, 7, 12, 14, 27, 51, 52, 53, 59, 60, 61, 65], "device_id": [0, 7, 11, 59, 61, 65], "0x": [0, 7, 59, 61, 65], "013x": [0, 7, 59, 61, 65], "basecolumn": [0, 1, 2, 4, 5, 7, 11, 12, 13, 14, 15, 27, 53, 55, 59, 61, 62, 63, 65], "attribut": [0, 5, 6, 7, 10, 12, 14, 27, 29, 36, 42, 53, 55, 59, 60, 61, 65], "let": [0, 3, 4, 7, 59, 61, 63, 65], "intern": [0, 5, 7, 11, 13, 14, 15, 18, 39, 51, 53, 59, 61, 62, 65], "countri": [0, 7, 59, 61, 65], "don": [0, 7, 38, 42, 59, 65], "t": [0, 7, 11, 38, 42, 59, 65], "appear": [0, 7, 59, 65], "just": [0, 6, 7, 11, 27, 38, 59, 65], "anoth": [0, 5, 7, 15, 59, 60, 63, 65], "model_s": [0, 7, 59, 65], "11": [0, 1, 2, 7, 11, 59, 65], "model_lin": [0, 59, 65], "concat": [0, 4, 7, 59, 60, 63, 65], "event_typ": [0, 7, 11, 59, 61, 65], "activ": [0, 7, 11, 12, 13, 27, 56, 59, 61, 65], "deactiv": [0, 7, 59, 61, 65], "plan": [0, 5, 7, 14, 27, 37, 59, 61, 64, 65], "chang": [0, 5, 7, 8, 9, 10, 26, 29, 36, 51, 56, 59, 61, 63, 65], "telecom": [0, 7, 11, 59, 61, 65], "internet": [0, 3, 7, 11, 51, 59, 61, 65], "event_t": [0, 6, 7, 11, 59, 61, 65], "timestamp": [0, 4, 6, 7, 11, 12, 15, 27, 32, 33, 49, 59, 61, 62, 63, 65], "begin": [0, 1, 6, 7, 12, 13, 14, 15, 39, 59, 61, 62, 63, 65], "2020": [0, 1, 6, 7, 10, 11, 59, 61, 62], "00": [0, 1, 2, 6, 7, 11, 32, 33, 59, 61, 62, 63], "end": [0, 1, 6, 7, 11, 12, 13, 14, 15, 27, 39, 46, 59, 61, 62, 63, 65], "31": [0, 1, 6, 7, 11, 37, 39, 59, 61, 62], "23": [0, 6, 7, 39, 59, 61, 62, 63], "59": [0, 6, 7, 11, 39, 59, 61, 62, 63], "interv": [0, 1, 6, 7, 12, 13, 14, 15, 39, 42, 48, 53, 59, 61, 62, 63, 65], "displai": [0, 2, 4, 6, 7, 11, 12, 26, 27, 59, 60, 61, 64, 65], "internaldeviceid": [0, 59], "uniqu": [0, 1, 11, 12, 15, 25, 27, 32, 33, 37, 59], "still": [0, 1, 2, 3, 6, 9, 11, 14, 59], "constrain": [0, 16, 17, 20, 59], "whenev": [0, 51, 59], "mean": [0, 7, 11, 45, 51, 52, 56, 59, 60, 62], "actual": [0, 1, 7, 11, 27, 38, 55, 59, 62], "temporari": [0, 27, 59], "purpos": [0, 5, 7, 10, 11, 13, 27, 39, 51, 52, 56, 57, 59], "through": [0, 5, 8, 14, 56, 59, 61, 62, 64], "syntax": [0, 9, 36, 49], "decim": [0, 6, 11, 15, 49, 52, 60], "well": [0, 12, 15, 33], "structur": [0, 5, 8, 14, 27, 52, 60], "arrai": [0, 6, 12, 14, 15, 27, 49, 52, 55, 59, 60], "int": [0, 1, 2, 4, 11, 12, 41, 43, 49, 62, 63], "struct": [0, 7, 27, 49, 55], "binari": [0, 3, 6, 9, 49, 55, 56], "float": [0, 6, 7, 27, 41, 42, 43, 48, 49, 62, 65], "suppli": [0, 6, 14, 25, 27, 38, 47, 52, 53, 59, 64], "task": [0, 61], "mani": [0, 37, 52, 55, 60, 63], "parallel": [0, 27, 55], "assign": 0, "executor": 0, "increas": [0, 36], "million": [0, 3, 4], "96": [0, 3], "dbldatagen_exampl": 0, "a_billion_row_t": 0, "md5": [0, 4], "hypothet": [0, 3], "credit": [0, 3, 60], "card": [0, 3, 52, 60], "payment_instrument_typ": [0, 4], "paypal": [0, 4], "visa": [0, 4], "mastercard": [0, 4], "amex": 0, "int_payment_instru": [0, 4], "0000": [0, 4], "9999": [0, 4], "payment_instru": [0, 4], "format_numb": [0, 4], "md5_payment_instru": [0, 4], "implicit": [0, 5, 14, 15, 27, 43, 59], "argument": [0, 3, 4, 7, 12, 14, 27, 36, 38, 51, 53, 56, 59, 60, 64], "deliber": 0, "chosen": [0, 15], "desir": [0, 6, 9, 59], "uniform": [0, 2, 12], "howev": [0, 2, 3, 5, 9, 12, 26, 27, 51, 61], "often": [0, 6, 60], "where": [0, 1, 3, 5, 7, 11, 12, 17, 25, 27, 37, 38, 49, 50, 52, 55, 59, 60, 62, 63], "randomseedmethod": [0, 1, 3, 7, 11, 12, 14, 27, 59, 60, 61], "hash_fieldnam": [0, 1, 3, 7, 11, 12, 14, 27, 59, 60, 61], "randomse": [0, 11, 12, 13, 14, 27, 40, 41, 42, 43, 51, 52], "42": [0, 11], "referenti": [0, 11, 59], "integr": [0, 11, 59], "primari": [0, 11, 36, 38], "foreign": [0, 11, 59], "kei": [0, 2, 11, 13, 14, 15, 25, 27, 36, 37, 59, 60, 63], "simpli": [0, 4, 7, 11, 49, 56, 59, 64], "global": [0, 27], "At": [0, 1], "author": [0, 10, 56], "gener": [1, 9, 10, 13, 14, 15, 16, 18, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 61, 65], "onli": [1, 2, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 25, 26, 27, 36, 38, 48, 49, 51, 52, 53, 58, 59, 60, 62, 63, 64], "addition": [1, 10, 38, 61], "column": [1, 2, 3, 4, 6, 8, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 46, 48, 49, 51, 52, 53, 55, 57, 60, 62, 64, 65], "an": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 20, 26, 27, 38, 46, 48, 51, 52, 55, 56, 59, 61, 62, 63], "set": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 25, 26, 27, 31, 32, 33, 35, 36, 38, 42, 51, 52, 53, 55, 59, 61, 62, 64, 65], "possibl": [1, 2, 5, 12, 15, 18, 25, 27, 37, 49, 60, 62], "given": [1, 26, 61], "guarante": [1, 4, 12, 46, 51, 59], "have": [1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 17, 19, 20, 21, 22, 23, 25, 27, 36, 37, 38, 42, 51, 52, 53, 56, 59, 60, 62, 63, 65], "two": [1, 3, 7, 11, 51, 53, 59], "constraint": [1, 8, 13, 27, 31, 32, 33, 34, 35, 54, 55, 64], "from": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 19, 23, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 56, 59, 61, 62, 63, 64, 65], "sql": [1, 2, 3, 4, 5, 7, 11, 14, 15, 18, 19, 24, 27, 39, 42, 46, 48, 49, 55, 57, 59, 61, 62, 63, 65], "spark": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 18, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 55, 57, 59, 60, 61, 62, 63, 64, 65], "purchase_id": [1, 2], "2000000": [1, 2], "product_cod": [1, 2], "10000": [1, 2, 32, 65], "in_stock": 1, "ye": 1, "build": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 25, 27, 46, 53, 55, 58, 59, 60, 62, 63, 64, 65], "lead": [1, 11], "conflict": [1, 5, 27], "inform": [1, 3, 5, 6, 11, 12, 15, 26, 27, 36, 57, 63], "about": [1, 5, 6, 7, 60], "our": [1, 4, 12, 56], "philosophi": 1, "try": [1, 27, 65], "reduc": [1, 55, 62], "combin": [1, 7, 12, 14, 15, 16, 18, 25, 37, 55, 56, 60, 63], "effect": [1, 2, 5, 12, 15, 48, 52, 53, 62], "highest": 1, "prioriti": 1, "start": [1, 4, 9, 12, 26, 27, 39, 53, 56, 64, 65], "tri": 1, "account": [1, 52], "suffici": [1, 3], "impli": [1, 10, 15, 27, 65], "ignor": [1, 11, 12, 15, 27, 38, 65], "both": [1, 3, 6, 11, 15, 26, 27, 48, 51, 63], "relev": 1, "boolean": [1, 5, 6, 14, 15, 49], "rescal": 1, "fals": [1, 4, 12, 14, 15, 18, 19, 21, 22, 23, 26, 27, 36, 38, 42, 48, 51, 52, 53, 60, 63], "year": 1, "dai": [1, 2, 11, 37, 65], "max": [1, 4, 13, 14, 29], "week": 1, "evenli": 1, "space": [1, 11], "criteria": [1, 6, 16], "forc": [1, 53], "overal": [1, 38, 53, 59, 64], "goal": [1, 11, 53, 64], "databrick": [1, 2, 3, 6, 10, 46, 50, 53, 58, 61, 63], "lab": [1, 6, 10, 63], "abl": [1, 6, 11], "repeat": [1, 3, 4, 8, 11, 12, 51, 52], "datetim": [1, 39, 49, 65], "first": [1, 12, 18, 27, 36, 51, 53, 59, 61, 63], "previou": [1, 7, 15], "last": [1, 61], "outsid": [1, 63], "insuffici": 1, "simpl": [1, 7, 8, 11, 59, 60, 61, 65], "300": 1, "make": [1, 2, 3, 5, 11, 18, 25, 27, 36, 53, 55, 56, 65], "verbos": [1, 14, 26, 27, 61, 65], "purchase_d": [1, 2], "simul": [1, 2, 59], "return": [1, 2, 11, 14, 15, 18, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 63, 64], "after": [1, 2, 15, 61, 65], "purchas": [1, 2, 62], "data_rang": [1, 2, 11], "daterang": [1, 2, 11, 12, 13, 15, 29, 54, 57], "2017": [1, 2, 65], "2018": [1, 2, 65], "06": [1, 2, 63], "55": [1, 2], "return_d": [1, 2], "date_add": [1, 2], "cast": [1, 6, 11, 60], "while": [1, 2, 5, 11, 15, 37, 38, 55, 58, 59, 60, 62], "explicitli": [1, 5, 14, 15, 27, 36, 37, 56], "us": [2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58], "sometim": 2, "skew": [2, 6, 11], "awkward": 2, "manag": [2, 15], "randomli": [2, 12, 14, 59, 62], "convert": [2, 7, 19, 27, 29, 39, 48, 51, 59], "per": [2, 11, 27, 37, 51, 52], "usual": [2, 11, 38], "semant": 2, "scale": [2, 3, 11, 15, 29, 36, 39, 40, 41, 42, 43, 44, 45, 48], "normal": [2, 4, 5, 11, 12, 13, 27, 40, 43, 44, 45, 51, 57, 62, 65], "gaussian": [2, 45], "beta": [2, 13, 40, 57, 60, 63], "gamma": [2, 11, 13, 40, 57, 60, 63], "exponenti": [2, 13, 40, 43, 57], "continu": [2, 6, 29, 39, 48], "select": [2, 4, 5, 9, 11, 55, 63, 64], "drawn": [2, 41, 42, 43], "frequenc": 2, "occurr": [2, 53], "approxim": [2, 15], "taken": [2, 60], "unlik": 2, "more": [2, 3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 26, 27, 38, 42, 59, 60, 61, 62, 63], "period": [2, 65], "immedi": [2, 52, 60], "dist": [2, 56], "creat": [2, 3, 7, 8, 9, 12, 14, 27, 38, 42, 46, 49, 50, 51, 55, 57, 61, 63, 64], "delai": [2, 62], "favor": 2, "short": [2, 11, 49, 60], "return_delai": 2, "code": [2, 3, 5, 7, 8, 9, 10, 12, 26, 38, 47, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63], "sampl": [2, 4, 12, 41, 42, 43, 44, 45], "environ": [2, 8, 9, 26, 27, 47, 50, 58, 61], "function": [2, 4, 5, 7, 12, 15, 19, 26, 27, 36, 42, 44, 45, 46, 47, 51, 53, 55, 61], "f": [2, 4, 11, 27, 42, 61], "dfdelai": 2, "datediff": 2, "plot": 2, "bar": [2, 3], "chart": 2, "aggreg": [2, 10], "count": [2, 11, 27, 60, 62, 65], "consid": [3, 21, 22, 25, 27], "experiment": [3, 26, 55, 63], "pyfunctext": [3, 13, 51, 54, 57], "pyfunctextfactori": [3, 13, 51, 54, 57], "fakertextfactori": [3, 13, 51, 54, 57], "expand": [3, 52], "extens": 3, "open": [3, 64], "fakertext": [3, 13, 51, 54, 57], "my_word_list": [3, 51], "danish": 3, "cheesecak": 3, "sugar": 3, "lollipop": 3, "wafer": 3, "gummi": 3, "sesam": 3, "jelli": 3, "bean": 3, "pie": 3, "ic": 3, "oat": 3, "fakerdataspec": 3, "ascii_company_email": 3, "ip_address": [3, 4], "ipv4_priv": 3, "faker_text": 3, "sentenc": [3, 51, 52, 60], "ext_word_list": [3, 51], "dffakeronli": 3, "test": [3, 5, 7, 8, 12, 13, 14, 15, 19, 23, 26, 27, 37, 38, 40, 42, 50, 51, 52, 53, 55, 57, 58], "look": [3, 38, 49, 59], "do": [3, 4, 7, 9, 10, 11, 16, 39, 56, 59, 61, 65], "context": [3, 51, 59], "initi": [3, 38, 51, 52, 55, 59, 63], "state": [3, 5, 10, 25, 27, 56, 63], "substanti": [3, 25], "slower": 3, "than": [3, 4, 11, 14, 16, 19, 21, 22, 23, 27, 38, 41, 43, 50, 56, 59, 62], "capabl": [3, 59, 61, 64], "up": [3, 9, 38, 53, 55], "medium": 3, "compat": [3, 36, 52, 53, 55, 60], "expect": [3, 5, 42, 51], "made": 3, "def": [3, 11, 27, 51, 63], "initplugincontext": 3, "text_gener": [3, 13, 54], "lambda": [3, 51, 53, 60, 63], "str": [3, 24, 27, 36, 51], "plugindataspec": 3, "initfn": [3, 51], "dfplugin": 3, "referenc": [3, 53, 61], "session": [3, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 49, 50, 55], "connect": [3, 10], "lookup": [3, 36, 37, 64], "dictionari": [3, 15, 32, 36], "separ": [3, 5, 7, 15, 38, 53, 55, 56, 59, 65], "worker": [3, 51], "pickl": 3, "serial": 3, "boundari": 3, "panda": [3, 27, 41, 43, 44, 45, 51, 52, 55, 58], "udf": [3, 27, 51, 52], "cannot": [3, 47, 59], "multipl": [3, 5, 8, 14, 18, 27, 36, 38, 39, 53, 55, 56, 59, 61, 62, 64], "recreat": 3, "ship": [3, 62], "correctli": 3, "synthet": [3, 5, 7, 8, 27, 38, 52, 60], "ip": [3, 34], "36": [3, 58], "initfak": [3, 51], "local": [3, 11, 39, 50, 51, 56], "en_u": [3, 51], "add_provid": [3, 51], "ip_address_gener": 3, "v": [3, 15, 51, 52, 60], "name_gener": 3, "address_gener": 3, "email_gener": 3, "fakerdata": 3, "construct": [3, 7, 15, 26, 27, 36, 49, 51, 55, 61], "setup": [3, 51, 56], "ctx": [3, 51], "withinit": [3, 13, 51], "withrootproperti": [3, 13, 51], "pass": [3, 7, 14, 15, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 48, 51, 52, 59, 60, 65], "fn": [3, 51], "fake_nam": [3, 51], "fake_sent": [3, 51], "translat": [3, 51], "keyword": [3, 27, 36, 38, 51], "without": [3, 10, 12, 36, 51, 53, 55, 60], "init": [3, 51], "rootproperti": [3, 51], "root": [3, 5, 11, 12, 51, 55, 56, 60], "interpret": [3, 52, 59, 60], "access": [3, 9, 38, 55, 56], "below": [3, 53], "my_properti": 3, "mylibrarytext": 3, "mycustomproperti": 3, "isproperti": 3, "get": [3, 11, 13, 14, 15, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 48, 51, 52, 53, 56, 59], "factori": [3, 51], "italian": 3, "interspers": 3, "fakertextit": 3, "it_it": 3, "italian_nam": 3, "IT": 3, "explor": [4, 7, 63, 64], "cdc": [4, 8], "abil": [4, 55, 59], "updat": [4, 27, 55], "exist": [4, 5, 8, 14, 15, 26, 27, 36, 52, 56, 57, 59, 64, 65], "insert": [4, 27, 52, 60], "concept": [4, 11], "underpin": [4, 11], "out": [4, 7, 10, 14, 38], "Then": 4, "them": [4, 11, 14, 56, 59, 60, 61, 64], "base_path": 4, "dbutil": 4, "mkdir": 4, "customers1_loc": 4, "customers1": 4, "record": [4, 12, 61], "wa": [4, 5, 14, 27, 51, 53, 59, 61], "memo": 4, "mark": [4, 5, 9, 15, 32, 36, 55, 59], "ad": [4, 7, 14, 27, 38, 59, 60], "clearcach": [4, 11], "32": 4, "arrow": [4, 11, 27], "maxrecordsperbatch": [4, 11], "20000": [4, 11], "uniquecustom": [4, 61], "dataspec": [4, 12, 51, 61, 62], "customer_id": [4, 11, 61], "alia": [4, 15, 27, 64], "american": 4, "discov": 4, "brand": [4, 6], "email2": 4, "base_column": [4, 60], "customer_not": 4, "iltext": [4, 13, 52, 54, 57, 59, 60], "word": [4, 49, 52], "created_t": 4, "now": [4, 55, 59, 63, 65], "modified_t": 4, "origin": [4, 6, 27, 56, 60], "around": [4, 11, 51, 53], "tabledefn": 4, "scripttabl": [4, 13, 27], "layout": [4, 6, 15, 59], "check": [4, 11, 14, 15, 17, 20, 27, 29, 36, 39, 48], "greater": [4, 19, 22, 23, 41, 43], "maximum": [4, 14, 15, 33, 39, 42, 48], "modif": [4, 5, 10, 26, 62, 64], "start_of_new_id": 4, "collect": 4, "df1_insert": 4, "clone": [4, 5, 13, 27, 62], "startingid": [4, 27], "withrowcount": [4, 13, 27], "lit": [4, 19], "recomput": 4, "lost": 4, "df_origin": 4, "df1_updat": 4, "limit": [4, 10, 15, 59], "50": [4, 11, 32, 37, 64], "modifi": [4, 5, 6, 10, 12, 16, 18, 25, 27, 36, 39, 53, 55, 62], "df_chang": 4, "union": 4, "order": [4, 5, 7, 12, 27, 53, 55, 59, 62, 63], "order_rand": 4, "orderbi": [4, 11], "updatecolumn": [4, 27], "correspond": [4, 14, 32, 36, 59, 61], "updatecolumnexpr": [4, 27], "dropdupl": [4, 11, 62], "createorreplacetempview": [4, 11], "customers1_chang": 4, "sqlstmt": 4, "scriptmerg": [4, 13, 27], "tgtname": [4, 27], "srcname": [4, 27], "joinexpr": [4, 27], "src": [4, 27], "tgt": [4, 27], "That": [4, 59], "": [4, 12, 15, 19, 23, 37, 39, 49, 53, 55, 56, 59], "requir": [4, 8, 15, 18, 26, 36, 38, 52, 56, 58, 59, 60, 64], "implement": [4, 5, 16, 18, 27, 36, 42, 49, 52, 55, 60, 64], "whether": [5, 6, 10, 14, 27, 31, 32, 33, 34, 35, 36, 37, 56, 60], "schema": [5, 8, 13, 14, 15, 26, 27, 49, 55, 57, 59, 64, 65], "psuedo": 5, "json": [5, 8, 27, 53, 55], "addit": [5, 10, 26, 27, 34, 38, 55, 59, 61, 65], "intermedi": [5, 11, 27], "calcul": [5, 11, 36], "level": [5, 12, 14, 27, 36, 55, 59, 61], "itself": [5, 10, 51, 52, 60, 65], "defer": 5, "until": [5, 27, 48], "invok": [5, 38, 51, 61, 64], "been": [5, 15, 27, 37, 51, 52, 56, 60, 61, 63], "hold": [5, 7, 53], "subsequ": [5, 36, 63], "post": 5, "again": [5, 11, 59], "similar": [5, 11, 26, 56, 62], "invoc": [5, 61], "_not_": 5, "prevent": [5, 31, 32, 33, 34, 35, 36], "previous": [5, 9, 52, 55, 59], "match": [5, 6, 11, 18, 25, 27, 38, 53, 59], "inadvert": 5, "unintend": 5, "permit": [5, 15], "withstructcolumn": [5, 7, 13, 27, 55], "simpler": 5, "built": [5, 27, 55, 56], "except": [5, 10, 12, 15, 27, 53, 59, 65], "constructor": [5, 26, 36, 55], "seedcolumnnam": [5, 13, 14, 27, 61], "respect": [5, 6, 11, 32], "issu": [5, 9, 11, 53, 55], "composit": [5, 7], "element": [5, 7, 12, 27, 52, 53, 60], "neither": 5, "individu": [5, 7, 31, 32, 33, 34, 35, 36, 37, 59], "exampl": [5, 6, 7, 8, 9, 15, 17, 27, 36, 37, 38, 48, 49, 51, 52, 53, 55, 56, 60, 61, 63, 64], "vari": [5, 7, 12, 55, 64], "d": [5, 7, 12, 15, 39, 52, 60, 65], "test_dataset1": [5, 12], "A": [5, 6, 7, 10, 11, 12, 15, 20, 24, 27, 36, 48, 50, 52, 53, 59, 60, 62], "numfeatur": [5, 6, 7, 12, 13, 14, 15, 55], "helper": [5, 7, 46], "action": [5, 10, 27], "pseudo": [5, 11, 27, 59], "debug": [5, 14, 26, 27, 52, 61], "reorder": 5, "cumul": 5, "densiti": 5, "percent": 5, "implic": 5, "restrict": [5, 10, 52, 59], "full": [5, 7, 11, 12, 14, 27, 49, 55, 62], "report": [5, 15, 56], "primit": 5, "scan": 5, "earlier": [5, 52, 60, 61, 62], "put": 5, "phase": [5, 7, 53, 55], "enforc": [5, 25, 36], "indic": [5, 11, 14, 15, 18, 27, 36, 38, 63, 64], "scenario": [6, 11, 36, 37, 38, 55, 60], "progress": 6, "mirror": 6, "model": [6, 17, 24, 37, 38, 51, 59], "train": 6, "adjud": 6, "assist": [6, 26], "summarizetodf": [6, 13, 26], "summari": [6, 11, 26, 30, 36, 55, 63, 64], "analysi": [6, 26, 57, 64], "datafram": [6, 18, 25, 26, 27, 31, 32, 33, 34, 35, 36, 38, 55, 60, 62, 64], "scriptdatageneratorfromschema": [6, 13, 26], "intend": [6, 14, 18, 36, 42, 64], "stub": [6, 26], "might": [6, 15, 36], "correct": [6, 7, 27, 29, 55, 56, 61], "generation_spec": 6, "synthetic_data": 6, "asin": 6, "help": [6, 55], "bigint": [6, 49], "img": 6, "price": [6, 11, 37], "doubl": [6, 49], "review": 6, "titl": [6, 47], "r_valu": 6, "tf_flag": 6, "short_valu": 6, "smallint": [6, 49], "32767": 6, "byte_valu": 6, "tinyint": [6, 49], "127": 6, "decimal_valu": 6, "date_valu": 6, "current_d": [6, 7], "binary_valu": 6, "refin": 6, "better": [6, 11, 55], "stage": 6, "evolv": 6, "come": 6, "suppressoutput": [6, 26, 27], "fragment": 7, "named_struct": [7, 61], "to_json": [7, 61], "basic": [7, 36, 56, 59, 60, 64], "techniqu": [7, 11, 60], "devic": [7, 32, 33, 37, 59, 61, 63, 65], "jsondata1": 7, "most": [7, 11, 13, 16, 26, 52, 59, 65], "form": [7, 27, 38, 46, 49, 53], "contain": [7, 10, 15, 23, 26, 27, 36, 51, 55, 56, 59], "equival": [7, 27, 53], "go": [7, 52], "assembl": 7, "doubletyp": 7, "booleantyp": 7, "shorttyp": 7, "timestamptyp": [7, 65], "datetyp": 7, "decimaltyp": [7, 27], "bytetyp": 7, "binarytyp": 7, "arraytyp": [7, 12], "maptyp": 7, "manufacturer_info": [7, 61], "event_info": [7, 61], "jsondata2": 7, "entri": [7, 9, 13, 14, 27, 38, 52, 57], "could": [7, 11, 46, 59, 60, 62], "simplifi": [7, 11, 36, 37, 55, 62], "infer_datatyp": [7, 27], "event_info1": 7, "event_info2": 7, "second": [7, 11, 63], "variant": [7, 60], "asjson": [7, 27], "observ": [7, 11], "slice": [7, 12], "r_0": 7, "r_1": 7, "r_2": 7, "r_3": 7, "r_4": 7, "ab": [7, 12], "length": [7, 12, 65], "variabl": [7, 12, 53, 60], "subset": 7, "especi": 7, "repetit": 7, "prone": 7, "resul": 7, "constant": [7, 15, 20, 28, 36, 59], "df_spec": [7, 60], "three": [7, 53], "code6": 7, "code7": 7, "conveni": [8, 64], "volum": [8, 25], "applic": [8, 10, 37, 62], "conjunct": [8, 36, 37, 64], "fly": 8, "expos": 8, "incorpor": [8, 9, 59], "revisit": 8, "iot": [8, 11, 32, 33], "captur": [8, 63], "extend": [8, 64], "troubleshoot": 8, "index": [8, 55, 56], "contribut": [8, 55], "log": [8, 12, 14, 26, 52], "modul": [8, 54, 56, 61], "data": [9, 10, 13, 14, 15, 16, 17, 18, 25, 26, 27, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 61, 64], "wheel": [9, 58], "file": [9, 10, 14, 15, 27, 36, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 56, 60, 63], "edit": [9, 56], "develop": [9, 55, 58], "git": [9, 55], "http": [9, 37, 41, 43, 44, 49, 53, 55, 56], "databrickslab": [9, 37, 55, 56], "fresh": 9, "master": [9, 10, 11], "branch": 9, "append": [9, 12, 14, 65], "identifi": 9, "tag": [9, 32, 47, 63], "url": 9, "dbr_7_3_lts_compat": [9, 55], "pick": [9, 56], "doc": [9, 36, 55, 56], "critic": 9, "bug": [9, 55], "stabl": 9, "preview": 9, "rare": 9, "azur": [9, 63], "aw": 9, "vc": 9, "prior": [9, 27, 51], "avail": [9, 14, 27, 31, 32, 33, 34, 35, 37, 50, 55, 61], "asset": 9, "download": [9, 56], "complet": [9, 27, 62], "v021": [9, 56], "py3": [9, 56], "none": [9, 14, 15, 18, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 51, 52, 53, 56], "whl": [9, 56], "replac": [9, 14, 63], "qualifi": 9, "v0": [9, 52, 56, 60], "outlin": [9, 26, 27, 59], "artifact": 9, "upload": 9, "attach": 9, "copyright": [10, 56], "agreement": 10, "govern": 10, "servic": 10, "term": 10, "cloud": 10, "mcsa": 10, "www": 10, "legal": [10, 56], "materi": [10, 56, 63], "pursuant": 10, "compli": [10, 55], "copi": [10, 14, 27, 42, 47], "publish": 10, "sole": 10, "agre": [10, 56], "redistribut": 10, "sublicens": 10, "complianc": 10, "recipi": 10, "carri": 10, "promin": 10, "notic": 10, "patent": 10, "trademark": 10, "exclud": [10, 19, 23], "those": [10, 12, 27, 59], "pertain": 10, "readabl": 10, "own": [10, 36], "condit": [10, 17, 27, 53, 62], "reproduct": 10, "whole": [10, 12, 39], "otherwis": [10, 27, 31, 32, 33, 34, 35, 36, 37, 48, 53], "termin": [10, 65], "upon": 10, "breach": 10, "perman": 10, "delet": [10, 27], "thereof": 10, "disclaim": 10, "OF": [10, 27], "liabil": 10, "THE": 10, "AS": [10, 27, 42], "AND": [10, 18], "WITH": 10, "fault": 10, "ON": 10, "behalf": 10, "ITS": 10, "licensor": 10, "warranti": 10, "relat": [10, 11, 17, 20, 36, 41, 43, 44, 45, 47, 53, 55, 56, 61], "TO": 10, "merchant": 10, "satisfactori": 10, "qualiti": 10, "OR": 10, "fit": 10, "FOR": 10, "non": [10, 18, 35, 53, 55, 63], "infring": 10, "total": [10, 50], "aris": 10, "provis": [10, 64], "shall": 10, "BE": 10, "ONE": 10, "thousand": 10, "000": [10, 36, 38, 51], "dollar": 10, "NO": 10, "holder": 10, "liabl": [10, 26], "claim": 10, "damag": 10, "contract": 10, "tort": 10, "deal": 10, "One": [11, 59], "join": [11, 12, 27, 37, 59, 60, 63, 64], "merg": [11, 27], "multi": [11, 37, 38, 55], "assum": [11, 39, 49, 52], "messag": [11, 37, 53], "distanc": 11, "cost": 11, "mb": 11, "categori": [11, 38], "transfer": 11, "phone": [11, 34, 59, 60], "partial": 11, "simplic": 11, "free": 11, "threshold": 11, "complex": [11, 55], "readi": 11, "rather": [11, 38, 50, 56, 59], "usag": [11, 12, 36, 37, 64], "noth": 11, "meant": [11, 14, 15, 18, 50, 53], "repres": [11, 12, 14, 15, 17, 24, 27, 31, 39, 48, 51, 52, 53, 62], "real": [11, 37], "world": [11, 37], "sm": 11, "variat": [11, 51], "retriev": [11, 31, 32, 33, 34, 35, 36, 37, 38, 52, 60, 64], "re": 11, "margin_pattern": 11, "compil": 11, "margin": [11, 53], "detect": 11, "stripmargin": [11, 53], "strip": [11, 53], "remov": 11, "split": [11, 53], "ld_multipl": 11, "intl_multipli": 11, "round": [11, 12, 15, 40, 42], "clear": [11, 64], "cach": 11, "reli": [11, 55], "unique_plan": 11, "plan_min_valu": [11, 30, 37], "plan_dataspec": 11, "plan_id": 11, "plan_nam": 11, "small": [11, 60], "cost_per_mb": 11, "005": 11, "050": 11, "cost_per_messag": 11, "001": 11, "02": [11, 32, 33], "cost_per_minut": 11, "simplist": 11, "multipli": 11, "thats": [11, 59], "ld_multipli": 11, "ld_cost_per_minut": 11, "intl_cost_per_minut": 11, "df_plan": 11, "likelihood": 11, "collis": [11, 59], "duplic": [11, 25, 36], "practic": [11, 59], "predict": [11, 42], "veri": [11, 36], "effici": [11, 27, 36, 42, 62], "imei": 11, "subscrib": 11, "exceed": 11, "larger": [11, 60], "even": [11, 59, 62], "though": 11, "unique_custom": 11, "50000": [11, 37, 63], "customer_min_valu": [11, 30, 37], "device_min_valu": [11, 30, 37], "1000000000": [11, 37], "subscriber_num_min_valu": [11, 30, 37], "customer_dataspec": 11, "customer_nam": 11, "phone_numb": 11, "subscriber_": 11, "myoper": 11, "df_custom": 11, "effective_custom": 11, "revis": [11, 63], "countdistinct": 11, "challeng": 11, "grain": 11, "entiti": 11, "turn": 11, "compris": 11, "smaller": 11, "item": [11, 49, 53, 59], "characterist": [11, 26], "subsystem": 11, "measur": [11, 32], "averag": [11, 37], "brows": 11, "approach": [11, 16, 63], "avg_events_per_custom": 11, "num_dai": 11, "mb_100": 11, "k_1": 11, "spread": [11, 12, 37], "events_dataspec": 11, "logic": [11, 25, 27, 64], "device_id_bas": 11, "ld": 11, "intl": 11, "toward": 11, "base_minut": 11, "shape": [11, 40, 44], "base_bytes_transf": 11, "75": 11, "els": [11, 14, 15, 27, 46], "bytes_transf": 11, "07": 11, "df_event": 11, "associ": [11, 27, 36, 37, 64], "df_customer_pr": 11, "byte": [11, 49], "df_enriched_ev": 11, "message_count": 11, "ld_minut": 11, "ceil": 11, "18": [11, 36], "local_minut": 11, "intl_minut": 11, "telephony_ev": 11, "df_summari": 11, "sum": 11, "total_mb": 11, "total_messag": 11, "total_ld_minut": 11, "total_local_minut": 11, "total_intl_minut": 11, "event_count": 11, "group": 11, "event_summari": 11, "df_customer_summari": 11, "customer_summari": 11, "df_invoic": 11, "internet_cost": 11, "sms_cost": 11, "ld_cost": 11, "local_cost": 11, "intl_cost": 11, "total_invoic": 11, "confirm": 11, "success": [12, 31, 32, 33, 34, 35, 36, 37], "accumul": 12, "convers": [12, 39], "minimum": [12, 14, 15, 33, 36, 42, 48, 55], "datarang": [12, 13, 15, 27, 39, 48, 54, 57], "top": [12, 55], "hashfieldnam": 12, "overridden": [12, 15, 51, 59, 64], "accept": [12, 49, 56], "percentag": [12, 15, 32, 35], "fraction": [12, 15], "distinct": [12, 59], "nrang": [12, 13, 15, 29, 54, 57], "synonym": 12, "undetermin": [12, 15], "suffix": [12, 13, 14, 15, 59, 60], "email_0": 12, "email_1": 12, "indirectli": 12, "basecolumnmethod": 12, "design": [12, 27, 59, 63], "numfeaturessuppli": 12, "bodi": [12, 61], "found": [12, 53, 55, 62], "columnspecopt": [12, 13, 15, 54, 57, 60], "info": [12, 14, 61], "emailcount": 12, "suitabl": [12, 27, 47], "o": 12, "time_to_run": [12, 65], "15": [12, 58], "rows_per_second": 12, "5000": [12, 27], "time_now": 12, "base_dir": 12, "datagenerator_": 12, "test_dir": 12, "path": [12, 27, 38, 53], "checkpoint_dir": 12, "checkpoint": [12, 63, 65], "self": [12, 14, 36, 52, 64], "dfdata": 12, "withstream": [12, 27, 63, 65], "rowspersecond": [12, 27, 63, 65], "writestream": [12, 27, 65], "outputmod": [12, 65], "checkpointloc": [12, 65], "start_tim": 12, "sleep": [12, 65], "stop": [12, 65], "end_tim": 12, "chained_rel": [13, 16], "chainedrel": [13, 16, 17, 57], "nofiltermixin": [13, 16, 18, 25, 57], "nopreparetransformmixin": [13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 57], "literal_range_constraint": [13, 16], "literalrang": [13, 16, 19, 57], "literal_relation_constraint": [13, 16], "literalrel": [13, 16, 20, 57], "negative_valu": [13, 16], "negativevalu": [13, 16, 21, 57], "positive_valu": [13, 16], "positivevalu": [13, 16, 22, 57], "ranged_values_constraint": [13, 16], "rangedvalu": [13, 16, 23], "sql_expr": [13, 16], "sqlexpr": [13, 16, 24, 57], "unique_combin": [13, 16], "uniquecombin": [13, 16, 25, 62], "basic_geometri": [13, 30], "basicgeometriesprovid": [13, 30, 31], "basic_process_historian": [13, 30], "basicprocesshistorianprovid": [13, 30, 32], "basic_telemat": [13, 30], "basictelematicsprovid": [13, 30, 33], "basic_us": [13, 30], "basicuserprovid": [13, 30, 34, 64], "benchmark_groupbi": [13, 30], "benchmarkgroupbyprovid": [13, 30, 35], "dataset_provid": [13, 30, 64], "datasetprovid": [13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 64], "dataset_definit": [13, 30, 36], "multi_table_telephony_provid": [13, 30], "multitabletelephonyprovid": [13, 30, 37, 64], "data_distribut": [13, 40], "datadistribut": [13, 40, 41, 42, 43, 44, 45, 57], "exponential_distribut": [13, 40], "normal_distribut": [13, 40], "column_generation_spec": [13, 54], "columngenerationspec": [13, 14, 54, 57], "getnam": [13, 14], "getnamesandtyp": [13, 14], "getorels": [13, 14, 15], "getplanentri": [13, 14], "inferdatatyp": [13, 14], "isfieldomit": [13, 14], "israndom": [13, 14], "isweightedvaluescolumn": [13, 14], "makegenerationexpress": [13, 14], "min": [13, 14, 29], "setbasecolumndatatyp": [13, 14], "specopt": [13, 14], "textgener": [13, 14, 51, 52, 54, 57], "text_separ": [13, 14], "column_spec_opt": [13, 14, 27, 54], "checkboolopt": [13, 15], "checkexclusiveopt": [13, 15], "checkoptionvalu": [13, 15], "checkvalidcolumnproperti": [13, 15], "data_analyz": [13, 54], "summar": [13, 26], "data_gener": [13, 54, 65], "build_ord": [13, 27], "computebuildplan": [13, 27], "describ": [13, 27, 38, 59, 64], "explain": [13, 27], "flatten": [13, 27, 53], "generatenam": [13, 27], "getcolumnspec": [13, 27], "getcolumntyp": [13, 27], "getinferredcolumnnam": [13, 27], "getoutputcolumnnam": [13, 27], "getoutputcolumnnamesandtyp": [13, 27], "hascolumnspec": [13, 27], "inferredschema": [13, 27], "isfieldexplicitlydefin": [13, 27], "reset": [13, 27], "rowcount": [13, 27, 52], "schemafield": [13, 27], "setrowcount": [13, 27], "usese": [13, 27], "use_se": [13, 27], "withconstraint": [13, 27], "withsqlconstraint": [13, 27, 62], "datagen_const": [13, 54], "adjustforcolumndatatyp": [13, 29, 39, 48], "getcontinuousrang": [13, 29, 39, 48], "getdiscreterang": [13, 29, 39, 48], "getscal": [13, 29, 39, 48], "isempti": [13, 29, 39, 48], "isfullypopul": [13, 29, 39, 48], "datasets_object": [13, 54], "navigatornod": [13, 38], "addentri": [13, 38], "isfin": [13, 38], "getassociateddataset": [13, 30, 36, 37, 38, 64], "getcombineddataset": [13, 38, 64], "getenricheddataset": [13, 38, 64], "getproviderdefinit": [13, 38], "getsummarydataset": [13, 38, 64], "getsupportingdataset": [13, 38, 64], "default_date_format": [13, 39], "default_end_d": [13, 39], "default_end_date_timestamp": [13, 39], "default_end_timestamp": [13, 30, 32, 33, 39], "default_start_d": [13, 39], "default_start_date_timestamp": [13, 39], "default_start_timestamp": [13, 30, 32, 33, 39], "default_utc_ts_format": [13, 39], "computedaterang": [13, 39], "computetimestampinterv": [13, 39], "computetimestamprang": [13, 39], "parseinterv": [13, 39], "function_build": [13, 54], "columngeneratorbuild": [13, 46, 54, 57], "mkexprchoicesfn": [13, 46], "html_util": [13, 54], "htmlutil": [13, 47, 54, 57], "formatcodeashtml": [13, 47], "formattextashtml": [13, 47], "schema_pars": [13, 54], "schemapars": [13, 49, 54, 57], "columntypefromstr": [13, 49], "columnsreferencesfromsqlstr": [13, 49], "gettypedefinitionpars": [13, 49], "parsecreatet": [13, 49], "spark_singleton": [13, 54], "sparksingleton": [13, 50, 54, 56, 57], "getinst": [13, 50], "getlocalinst": [13, 50, 56], "text_generator_plugin": [13, 54], "pandasgeneratetext": [13, 51, 52], "withinitperbatch": [13, 51], "classicgeneratetext": [13, 52], "generatetext": [13, 52], "templategener": [13, 52, 54, 57], "compactnumpytypeforvalu": [13, 52], "getastupleorels": [13, 52], "getnprandomgener": [13, 52], "withrandomse": [13, 40, 42, 52], "util": [13, 47, 54, 57], "datagenerror": [13, 27, 53, 54, 57], "coalesce_valu": [13, 53, 54, 57], "deprec": [13, 27, 53, 54, 57], "json_value_from_path": [13, 53, 54, 57], "mkboundslist": [13, 53, 54, 57], "parse_time_interv": [13, 53, 54, 57], "split_list_matching_condit": [13, 53, 54, 57], "strip_margin": [13, 53, 54, 57], "system_time_milli": [13, 53, 54, 57], "topologicalsort": [13, 53, 54, 57], "main": [13, 27, 36, 55, 56, 64], "coltyp": [14, 27], "nullabl": [14, 27], "kwarg": [14, 27, 36, 38, 48, 51], "due": [14, 55, 59, 62], "basi": 14, "attempt": 14, "flag": [14, 31, 32, 33, 34, 35, 36, 56, 59], "wildcard": [14, 27], "warn": [14, 61], "tupl": [14, 27, 52], "represent": [14, 33, 49, 52, 53], "infer": [14, 15, 27, 55], "weigh": 14, "renam": [14, 55], "param": [14, 27, 38, 51], "colname1": 14, "colnamen": 14, "vector": [14, 52, 55], "prepend": 14, "columndatatyp": 14, "column_datatyp": 14, "dict": [14, 27, 36], "prop": [15, 51], "alias": [15, 38, 64], "mainli": 15, "valid": [15, 18, 19, 23, 36, 49, 55, 64], "auto": 15, "raw_valu": 15, "colummn": 15, "declar": [15, 27, 64], "statu": [15, 65], "back": 15, "month": 15, "textsepar": 15, "togeth": 15, "interim": [15, 27, 59], "present": [15, 25, 27, 53, 59], "precis": 15, "escapespecialchar": [15, 52, 60], "escap": [15, 52, 60], "special": [15, 52, 60], "char": [15, 49, 52, 53, 60], "raw": 15, "four": 15, "categor": [15, 60], "exclus": 15, "mutual": 15, "option_valu": 15, "columnprop": 15, "recogn": 15, "val": 15, "supported_oper": [16, 18], "filterexpress": [16, 18], "mkcombinedconstraintexpress": [16, 18], "preparedatagener": [16, 18, 25], "supportsstream": [16, 18, 30, 31, 32, 33, 34, 35, 36, 38, 64], "transformdatafram": [16, 18, 25], "reject": 16, "meet": [16, 18, 25], "possibli": 16, "less": [16, 19, 21, 23, 62], "request": [16, 31, 32, 33, 34, 35, 36, 37, 56, 62], "strategi": [16, 62], "chainedinequ": [17, 57], "relationship": [17, 20], "next": [17, 52, 59, 60], "satisfi": [17, 18, 27, 62], "transact": 17, "retail": [17, 38], "purchased": 17, "shippingd": 17, "returnd": 17, "abc": [18, 36, 42], "filter": [18, 38, 49, 62], "evalu": [18, 27, 35, 53], "static": [18, 27, 36, 41, 42, 43, 44, 45, 52, 55], "constraintexpress": 18, "abstract": [18, 29, 36, 42, 55, 57], "prepar": [18, 25, 27], "unmodifi": [18, 25], "mixin": [18, 36], "concret": 18, "inherit": [18, 42], "_generatefilterexpress": 18, "transformedatafram": 18, "scalarrang": [19, 23, 57], "lowvalu": [19, 23], "highvalu": [19, 23], "strict": [19, 21, 22, 23, 59], "liter": [19, 20, 27, 60], "low": [19, 23, 59], "equal": [19, 21, 22, 23], "high": [19, 23, 25], "scalarinequ": 20, "compar": 20, "against": [20, 53, 55, 56], "neg": [21, 48, 57], "zero": [21, 22, 52, 60, 62], "essenti": [21, 22, 25, 61], "posit": [22, 25, 36, 51, 57], "dedupl": [25, 62], "elimin": [25, 49], "entir": [25, 59], "watermark": [25, 62], "resourc": 25, "maintain": 25, "futur": [26, 27], "suppress": [26, 27], "skeleton": 26, "classmethod": [26, 27, 36, 38, 39, 45, 46, 47, 49, 50], "consol": 26, "accur": [26, 27], "batchsiz": 27, "act": [27, 36, 61], "amount": 27, "sparkcontext": 27, "defaultparallel": 27, "apach": 27, "withtempview": 27, "withview": 27, "minu": [27, 49], "deep": 27, "preserv": 27, "drive": 27, "chain": 27, "builder": [27, 58], "descript": [27, 30, 36, 64], "explan": 27, "lst": [27, 53], "untitl": 27, "nextnameindex": 27, "dummi": [27, 34, 37, 64], "colnam": 27, "impact": [27, 62], "redefin": 27, "optionkei": 27, "optionvalu": 27, "adjust": [27, 29, 39, 48, 55], "keep": [27, 39, 64], "ratio": 27, "heurist": 27, "updateexpr": 27, "delexpr": 27, "timeexpr": 27, "insertexpr": 27, "useexplicitnam": 27, "insertcolumn": 27, "insertcolumnexpr": 27, "srcalia": 27, "tgtalia": 27, "ashtml": 27, "target": [27, 36, 56], "del": 27, "claus": [27, 62], "travel": 27, "timestamp_express": 27, "insert_column_nam": 27, "update_column_nam": 27, "displayhtml": [27, 47], "tableformat": 27, "rc": 27, "seedval": 27, "receiv": 27, "like": [27, 32, 37, 50, 52], "idiom": 27, "cl": [27, 36], "arg1": 27, "arg2": 27, "g": [27, 36, 56], "java": [27, 56], "staticmethod": 27, "builtin": 27, "nowarn": 27, "varieti": [27, 38, 62], "regex": 27, "infer_datytyp": 27, "dataa": 27, "irrespect": [27, 59], "affect": 27, "aspect": 27, "sch": 27, "sqlexpress": 27, "optim": [27, 55, 61, 64], "compos": 27, "field_nam": 27, "field_express": 27, "whose": 27, "treat": [27, 51, 60], "track": [29, 55, 56], "refactor": [29, 55], "ctype": [29, 39, 48], "empti": [29, 39, 48, 51], "var": [29, 39, 48], "allowed_opt": [30, 31, 32, 33, 35, 36], "max_location_id": [30, 31], "min_location_id": [30, 31], "gettablegener": [30, 31, 32, 33, 34, 35, 36, 37, 64], "default_num_devic": [30, 32, 33], "default_num_pl": [30, 32], "default_num_tag": [30, 32], "max_device_id": [30, 32, 33], "max_property_valu": [30, 32], "min_device_id": [30, 32, 33], "min_property_valu": [30, 32], "default_max_lat": [30, 33], "default_max_lon": [30, 33], "default_min_lat": [30, 33], "default_min_lon": [30, 33], "max_long": [30, 34, 35, 37], "default_num_group": [30, 35], "default_pct_nul": [30, 35], "default_partit": [30, 36], "default_row": [30, 36], "default_table_nam": [30, 36], "datasetdecoratorutil": [30, 36], "mkclass": [30, 36], "datasetdefinit": [30, 36], "associateddataset": [30, 36], "primaryt": [30, 36], "providerclass": [30, 36], "noassociateddatasetsmixin": [30, 31, 32, 33, 34, 35, 36], "autocomputepartit": [30, 31, 32, 33, 34, 35, 36, 37], "checkopt": [30, 36], "getdatasetdefinit": [30, 36], "getdatasett": [30, 36], "getregistereddataset": [30, 36], "getregistereddatasetsvers": [30, 36], "isvaliddataprovidertyp": [30, 36], "registerdataset": [30, 36], "unregisterdataset": [30, 36], "default_avg_events_per_custom": [30, 37], "default_num_custom": [30, 37], "default_num_dai": [30, 37], "default_num_plan": [30, 37], "getcustom": [30, 37], "getdeviceev": [30, 37], "getplan": [30, 37], "geospati": 31, "linestr": 31, "polygon": 31, "geometrytyp": 31, "maxvertic": 31, "datset": [31, 32, 33, 34, 35], "9223372036854775807": [31, 32, 33, 34, 35, 37], "tablenam": [31, 32, 33, 34, 35, 36, 37, 38], "autosizepartit": [31, 32, 33, 34, 35, 36, 37], "throw": [31, 32, 33, 34, 35, 36, 37, 53], "implementor": [31, 32, 33, 34, 35, 36, 37, 42], "plant": 32, "unit": [32, 50, 55], "numdevic": [32, 33], "numplant": 32, "numtag": 32, "starttimestamp": [32, 33], "earliest": [32, 33], "endtimestamp": [32, 33], "dataqualityratio": 32, "pctquestion": 32, "pctsubstitut": 32, "pctannot": 32, "is_question": 32, "is_substitut": 32, "is_annot": 32, "2024": [32, 33], "60": 32, "4294967296": 32, "lat": 33, "lon": 33, "head": 33, "minlat": 33, "latitud": 33, "maxlat": 33, "minlon": 33, "longitud": 33, "maxlon": 33, "generatewkt": 33, "known": [33, 55, 60], "90": 33, "180": [33, 65], "optin": 34, "dummyvalu": [34, 37, 64], "widen": [34, 37], "groupbi": 35, "cardin": 35, "decor": [36, 53, 64], "subclass": 36, "intent": 36, "disallow": 36, "ineffici": 36, "window": 36, "microbatch": 36, "inner": 36, "_dataset_nam": 36, "_dataset_t": 36, "_dataset_descript": 36, "_dataset_summari": 36, "_dataset_supports_stream": 36, "least": 36, "discover": 36, "creatabl": 36, "done": 36, "caller": 36, "registr": [36, 64], "autoregist": [36, 64], "predefined_dataset": 36, "arg": [36, 51, 53], "metadata": [36, 64], "bool": [36, 49], "store": [36, 51, 63], "signatur": [36, 51], "default_opt": 36, "alwai": [36, 52, 59, 60], "equat": 36, "logarithm": 36, "chose": 36, "allowedopt": 36, "benchmark": [36, 37, 38, 63, 64], "exercis": [36, 37], "candidatedataprovid": 36, "unregist": 36, "nest": [36, 49], "wrapper": 36, "telephoni": [37, 64], "io": 37, "public_doc": 37, "multi_table_data": 37, "html": [37, 47, 55], "cellular": 37, "device_ev": 37, "invoic": [37, 64], "getcombinedt": 37, "bill": 37, "unlimit": 37, "band": 37, "tune": 37, "numplan": [37, 64], "numcustom": [37, 64], "averageeventsperdai": 37, "numdai": 37, "generaterandom": 37, "averageeventspercustom": 37, "handl": [38, 39, 52, 53, 60], "situat": [38, 50], "plugin": [38, 51, 55, 59], "convent": [38, 56, 60], "hierarch": 38, "slash": 38, "sale": 38, "providernam": 38, "navig": [38, 47], "dot": 38, "notat": 38, "dataset_group": 38, "intanc": 38, "pathseg": 38, "travers": 38, "syntact": [38, 51], "layer": 38, "attributepath": 38, "datasetproviderdefinit": 38, "providerdefinit": 38, "supportstream": 38, "datetime_format": 39, "y": [39, 53], "m": 39, "h": 39, "timedelta": [39, 65], "nearest": 39, "timezon": 39, "pars": [39, 49, 53, 55, 57], "2023": 39, "unique_valu": 39, "divid": 39, "interval_str": 39, "alpha": [40, 41, 60, 63], "beta_func": [40, 41], "generatenormalizeddistributionsampl": [40, 41, 42, 43, 44, 45], "get_np_random_gener": [40, 42], "withround": [40, 42], "exponential_func": [40, 43], "gamma_func": [40, 44], "normal_func": [40, 45], "standardnorm": [40, 45], "parameter": [41, 43], "en": [41, 43, 44, 51], "wikipedia": [41, 43, 44, 60], "org": [41, 43, 44, 49, 53, 56, 61], "wiki": [41, 43, 44], "beta_distribut": 41, "alpha_seri": 41, "beta_seri": 41, "random_se": [41, 42, 43, 44, 45], "numpi": [41, 42, 43, 44, 45, 51, 52, 58, 59], "easili": [42, 47], "bound": [42, 48, 53], "scale_seri": [43, 44], "k": [44, 52, 60], "theta": [44, 60], "gamma_distribut": 44, "shape_seri": 44, "stddev": 45, "mean_seri": 45, "std_dev_seri": 45, "deviat": 45, "seed_column": 46, "rnd_column": 46, "weight1": 46, "value1": 46, "weight2": 46, "value2": 46, "weightn": 46, "valuen": 46, "probabl": 46, "onward": 46, "choic": [46, 62], "codetext": 47, "wrap": [47, 51], "pre": [47, 61, 64], "clipboard": 47, "button": 47, "reformat": [47, 55], "preformat": 47, "ifram": 47, "render": 47, "newer": [47, 55, 63], "block": 47, "cross": [47, 51], "domain": 47, "textcont": 47, "content": [47, 54, 55, 56, 61], "upper": 48, "decreas": 48, "todo": 48, "fulli": 48, "type_str": 49, "varchar": 49, "nvarchar": [49, 55], "p": 49, "type1": 49, "type2": 49, "parser": 49, "recurs": 49, "sql_string": 49, "filteritem": 49, "condid": 49, "columnn": 49, "overhead": 49, "improv": [49, 55], "pypars": [49, 55, 58], "source_schema": 49, "primarili": [50, 51], "standalon": 50, "singleton": [50, 55, 57], "datalib": 50, "appnam": 50, "useallcor": 50, "machin": 50, "lib": 51, "rootclass": 51, "faker": [51, 59], "flavor": 51, "initperbatch": 51, "repr": 51, "3rd": [51, 53, 55, 59], "parti": [51, 53, 55, 59], "client": 51, "enclos": 51, "dont": 51, "thread": 51, "safeti": 51, "forcenewinst": [51, 52], "pointer": 51, "initfunct": 51, "configur": [51, 52, 55, 61], "mname": 51, "_lib": 51, "_rootclass": 51, "paragraph": [52, 60], "extendedwordlist": [52, 60], "ipsum": [52, 60], "lorem": [52, 60], "classic": 52, "basevalu": 52, "input": [52, 53], "unescap": 52, "iban": [52, 60], "had": [52, 60], "v1": 52, "v9": [52, 60], "substitut": [52, 60], "nth": [52, 60], "lowercas": [52, 60], "hex": [52, 60], "digit": [52, 60], "uppercas": [52, 60], "alphabet": [52, 60], "charact": [52, 53, 60], "alphanumer": [52, 60], "255": [52, 60], "65535": [52, 60], "dr_": [52, 60], "dr_0": [52, 60], "dr_999": [52, 60], "999": [52, 60], "backward": [52, 60], "prefer": [52, 53], "forward": [52, 53], "listvalu": 52, "smallest": 52, "np": 52, "ndarrai": 52, "dtype": 52, "compact": 52, "defaultvalu": [52, 53], "valuenam": 52, "default_v": 52, "msg": 53, "baseexcept": 53, "cond": 53, "rais": 53, "anyth": 53, "searchpath": 53, "jsondata": 53, "jmespath": [53, 58], "search": 53, "sub": 53, "city_nam": 53, "city_id": 53, "city_pop": 53, "splitlistoncondit": 53, "el": 53, "sublist": 53, "marginchar": 53, "multilin": 53, "millisecond": 53, "sinc": 53, "epoch": 53, "milli": 53, "initial_column": 53, "topolog": 53, "sort": 53, "pair": 53, "algorith": 53, "inbound": 53, "lower": [53, 56], "subpackag": [54, 62], "submodul": 54, "notabl": 55, "distribiut": 55, "migrat": 55, "pytest": [55, 56, 58], "licens": 55, "public": 55, "readm": 55, "element_at": 55, "incompat": 55, "th": 55, "pipfil": 55, "reflect": 55, "logger": [55, 61], "thank": 55, "marvin": 55, "schenkel": 55, "enhanc": [55, 63], "circumst": 55, "_": [55, 58, 59], "py": 55, "comment": 55, "prospector": [55, 56, 58], "pep440": 55, "older": [55, 56], "minor": 55, "unittest": [55, 56], "pipenv": 55, "conda": 55, "cov": [55, 58], "coverag": [55, 56], "resolv": 55, "pep8": [55, 56], "triag": 55, "pylint": [55, 56], "rtd": [55, 58], "scheme": 55, "move": 55, "tidi": 55, "txt": [55, 56], "db": 55, "happili": 56, "welcom": 56, "pull": 56, "affirm": 56, "submit": 56, "warrant": 56, "were": 56, "dev": 56, "lint": 56, "tool": 56, "buildenv": 56, "env": 56, "virtual": [56, 58], "openjdk": 56, "56": 56, "azul": 56, "zulu": 56, "dbl_testdatagener": 56, "subdirectori": 56, "rel": 56, "clean": 56, "unitest": 56, "sure": 56, "pyspark_python": 56, "pyspark_driver_python": 56, "htmlcov": 56, "inxdex": 56, "down": [56, 63], "mix": 56, "letter": 56, "underscor": 56, "legaci": 56, "pep": 56, "0008": 56, "data_summary_field_nam": 57, "summary_field_nam": 57, "summary_field_name_renam": 57, "auto_compute_method": 57, "compute_method_valid_valu": 57, "expr_opt": 57, "hash_compute_method": 57, "raw_values_compute_method": 57, "values_compute_method": 57, "pattern_name_equals_valu": 57, "pattern_value_space_nam": 57, "scalar": 57, "inequ": 57, "22": 58, "pickleshar": 58, "py4j": 58, "pyarrow": 58, "dateutil": 58, "six": 58, "setuptool": 58, "52": 58, "bumpvers": 58, "timeout": 58, "rstcheck": 58, "sphinx": 58, "theme": 58, "nbsphinx": 58, "numpydoc": 58, "pypandoc": 58, "ipython": 58, "recommonmark": 58, "markdown": 58, "jinja2": 58, "copybutton": 58, "principl": 59, "autoincr": 59, "instanti": 59, "direct": 59, "predetermin": 59, "seeed": 59, "why": 59, "stress": 59, "current_timestamp": 59, "although": 59, "determinist": 59, "thei": [59, 60, 63, 64], "third": 59, "inher": 59, "probabilitti": 59, "extrem": 59, "colum": 59, "proce": 59, "addcolumn": 59, "superced": 59, "am": 59, "cycl": 59, "topic": 59, "simplest": [60, 64], "added": 60, "sentanc": 60, "ui": 60, "mockup": 60, "articl": 60, "sample_text": 60, "num_row": 60, "shorthand": 60, "co": 60, "ip_addr": 60, "ddd": 60, "dddd": 60, "ddddddd": 60, "phone2": 60, "expans": 60, "dr_v": 60, "transmit": 60, "much": 60, "snippet": 60, "synopsi": 61, "histori": 61, "citi": 61, "yet": 61, "best": 61, "achiev": 62, "close": 62, "speak": 62, "pure": 62, "wherea": 62, "product_sku": 62, "order_t": 62, "shipping_t": 62, "somewhat": 62, "contriv": 62, "discard": 62, "qty_ord": 62, "unit_pric": 62, "30": 62, "trigger": 62, "signific": 62, "platform": 63, "reliabl": 63, "ingest": 63, "annot": 63, "insid": 63, "autoload": 63, "ahead": 63, "idl": 63, "device_data_sourc": 63, "device_st": 63, "device_weight": 63, "site": 63, "phi": 63, "mu": 63, "area": 63, "statuscod": 63, "notif": 63, "num_local_devic": 63, "starting_datetim": 63, "2022": 63, "end_datetim": 63, "09": 63, "event_interv": 63, "local_device_id": 63, "local_devic": 63, "devicekei": 63, "signal": 63, "tagnam": 63, "tagvalu": 63, "tag_t": 63, "downstream": [63, 65], "experi": 63, "event_d": 63, "partition_col": 63, "device_data_raw": 63, "rowsrequest": 63, "to_dat": 63, "device_data_summari": 63, "table_properti": 63, "writestatsasstruct": 63, "writestatsasjson": 63, "autooptim": 63, "optimizewrit": 63, "device_summari": 63, "rank": 63, "row_numb": 63, "desc": 63, "preconfigur": 64, "prebuilt": 64, "architectur": 64, "competit": 64, "problem": 64, "role": 64, "interchang": 64, "dynam": 64, "wider": 64, "collabor": 64, "multit": 64, "multi_t": 64, "dfplan": 64, "dfcustom": 64, "dfdeviceev": 64, "deviceev": 64, "dfinvoic": 64, "caveat": 65, "math": 65, "hour": 65, "site_id": 65, "site_cd": 65, "c1": 65, "sector_technology_desc": 65, "ordin": 65, "association_oss_cell_info": 65, "sector_status_desc": 65, "last_sync_dt": 65, "gsm": 65, "umt": 65, "lte": 65, "test_cell_flg": 65, "500": 65, "dftestdatastream": 65, "someth": 65, "runtimeerror": 65, "writer": 65, "consumpt": 65, "streamingdemo": 65}, "objects": {"": [[13, 0, 0, "-", "dbldatagen"]], "dbldatagen": [[14, 0, 0, "-", "column_generation_spec"], [15, 0, 0, "-", "column_spec_options"], [16, 0, 0, "-", "constraints"], [26, 0, 0, "-", "data_analyzer"], [27, 0, 0, "-", "data_generator"], [28, 0, 0, "-", "datagen_constants"], [29, 0, 0, "-", "datarange"], [30, 0, 0, "-", "datasets"], [38, 0, 0, "-", "datasets_object"], [39, 0, 0, "-", "daterange"], [40, 0, 0, "-", "distributions"], [46, 0, 0, "-", "function_builder"], [47, 0, 0, "-", "html_utils"], [48, 0, 0, "-", "nrange"], [49, 0, 0, "-", "schema_parser"], [50, 0, 0, "-", "spark_singleton"], [51, 0, 0, "-", "text_generator_plugins"], [52, 0, 0, "-", "text_generators"], [53, 0, 0, "-", "utils"]], "dbldatagen.column_generation_spec": [[14, 1, 1, "", "ColumnGenerationSpec"]], "dbldatagen.column_generation_spec.ColumnGenerationSpec": [[14, 2, 1, "", "baseColumn"], [14, 2, 1, "", "baseColumns"], [14, 2, 1, "", "begin"], [14, 2, 1, "", "datatype"], [14, 2, 1, "", "end"], [14, 2, 1, "", "expr"], [14, 2, 1, "", "exprs"], [14, 3, 1, "", "getNames"], [14, 3, 1, "", "getNamesAndTypes"], [14, 3, 1, "", "getOrElse"], [14, 3, 1, "", "getPlanEntry"], [14, 2, 1, "", "inferDatatype"], [14, 2, 1, "", "interval"], [14, 2, 1, "", "isFieldOmitted"], [14, 2, 1, "", "isRandom"], [14, 2, 1, "", "isWeightedValuesColumn"], [14, 3, 1, "", "keys"], [14, 3, 1, "", "makeGenerationExpressions"], [14, 2, 1, "", "max"], [14, 2, 1, "", "min"], [14, 2, 1, "", "numColumns"], [14, 2, 1, "", "numFeatures"], [14, 2, 1, "", "prefix"], [14, 2, 1, "", "randomSeed"], [14, 3, 1, "", "setBaseColumnDatatypes"], [14, 2, 1, "", "specOptions"], [14, 2, 1, "", "step"], [14, 3, 1, "", "structType"], [14, 2, 1, "", "suffix"], [14, 2, 1, "", "textGenerator"], [14, 2, 1, "", "text_separator"]], "dbldatagen.column_spec_options": [[15, 1, 1, "", "ColumnSpecOptions"]], "dbldatagen.column_spec_options.ColumnSpecOptions": [[15, 3, 1, "", "checkBoolOption"], [15, 3, 1, "", "checkExclusiveOptions"], [15, 3, 1, "", "checkOptionValues"], [15, 3, 1, "", "checkValidColumnProperties"], [15, 3, 1, "", "getOrElse"], [15, 2, 1, "", "options"]], "dbldatagen.constraints": [[17, 0, 0, "-", "chained_relation"], [18, 0, 0, "-", "constraint"], [19, 0, 0, "-", "literal_range_constraint"], [20, 0, 0, "-", "literal_relation_constraint"], [21, 0, 0, "-", "negative_values"], [22, 0, 0, "-", "positive_values"], [23, 0, 0, "-", "ranged_values_constraint"], [24, 0, 0, "-", "sql_expr"], [25, 0, 0, "-", "unique_combinations"]], "dbldatagen.constraints.chained_relation": [[17, 1, 1, "", "ChainedRelation"]], "dbldatagen.constraints.constraint": [[18, 1, 1, "", "Constraint"], [18, 1, 1, "", "NoFilterMixin"], [18, 1, 1, "", "NoPrepareTransformMixin"]], "dbldatagen.constraints.constraint.Constraint": [[18, 4, 1, "", "SUPPORTED_OPERATORS"], [18, 2, 1, "", "filterExpression"], [18, 3, 1, "", "mkCombinedConstraintExpression"], [18, 3, 1, "", "prepareDataGenerator"], [18, 2, 1, "", "supportsStreaming"], [18, 3, 1, "", "transformDataframe"]], "dbldatagen.constraints.constraint.NoPrepareTransformMixin": [[18, 3, 1, "", "prepareDataGenerator"], [18, 3, 1, "", "transformDataframe"]], "dbldatagen.constraints.literal_range_constraint": [[19, 1, 1, "", "LiteralRange"]], "dbldatagen.constraints.literal_relation_constraint": [[20, 1, 1, "", "LiteralRelation"]], "dbldatagen.constraints.negative_values": [[21, 1, 1, "", "NegativeValues"]], "dbldatagen.constraints.positive_values": [[22, 1, 1, "", "PositiveValues"]], "dbldatagen.constraints.ranged_values_constraint": [[23, 1, 1, "", "RangedValues"]], "dbldatagen.constraints.sql_expr": [[24, 1, 1, "", "SqlExpr"]], "dbldatagen.constraints.unique_combinations": [[25, 1, 1, "", "UniqueCombinations"]], "dbldatagen.constraints.unique_combinations.UniqueCombinations": [[25, 3, 1, "", "prepareDataGenerator"], [25, 3, 1, "", "transformDataframe"]], "dbldatagen.data_analyzer": [[26, 1, 1, "", "DataAnalyzer"]], "dbldatagen.data_analyzer.DataAnalyzer": [[26, 3, 1, "", "scriptDataGeneratorFromData"], [26, 3, 1, "", "scriptDataGeneratorFromSchema"], [26, 3, 1, "", "summarize"], [26, 3, 1, "", "summarizeToDF"]], "dbldatagen.data_generator": [[27, 1, 1, "", "DataGenerator"]], "dbldatagen.data_generator.DataGenerator": [[27, 3, 1, "", "build"], [27, 2, 1, "", "build_order"], [27, 3, 1, "", "clone"], [27, 3, 1, "", "computeBuildPlan"], [27, 3, 1, "", "describe"], [27, 3, 1, "", "explain"], [27, 3, 1, "", "flatten"], [27, 3, 1, "", "generateName"], [27, 3, 1, "", "getColumnSpec"], [27, 3, 1, "", "getColumnType"], [27, 3, 1, "", "getInferredColumnNames"], [27, 3, 1, "", "getOutputColumnNames"], [27, 3, 1, "", "getOutputColumnNamesAndTypes"], [27, 3, 1, "", "hasColumnSpec"], [27, 2, 1, "", "inferredSchema"], [27, 3, 1, "", "isFieldExplicitlyDefined"], [27, 3, 1, "", "option"], [27, 3, 1, "", "options"], [27, 2, 1, "", "random"], [27, 2, 1, "", "randomSeed"], [27, 3, 1, "", "reset"], [27, 2, 1, "", "rowCount"], [27, 2, 1, "", "schema"], [27, 2, 1, "", "schemaFields"], [27, 3, 1, "", "scriptMerge"], [27, 3, 1, "", "scriptTable"], [27, 2, 1, "", "seedColumnName"], [27, 3, 1, "", "setRowCount"], [27, 3, 1, "", "useSeed"], [27, 3, 1, "", "use_seed"], [27, 3, 1, "", "withColumn"], [27, 3, 1, "", "withColumnSpec"], [27, 3, 1, "", "withColumnSpecs"], [27, 3, 1, "", "withConstraint"], [27, 3, 1, "", "withConstraints"], [27, 3, 1, "", "withIdOutput"], [27, 3, 1, "", "withRowCount"], [27, 3, 1, "", "withSchema"], [27, 3, 1, "", "withSqlConstraint"], [27, 3, 1, "", "withStructColumn"]], "dbldatagen.datarange": [[29, 1, 1, "", "DataRange"]], "dbldatagen.datarange.DataRange": [[29, 3, 1, "", "adjustForColumnDatatype"], [29, 3, 1, "", "getContinuousRange"], [29, 3, 1, "", "getDiscreteRange"], [29, 3, 1, "", "getScale"], [29, 3, 1, "", "isEmpty"], [29, 3, 1, "", "isFullyPopulated"], [29, 2, 1, "", "max"], [29, 2, 1, "", "min"]], "dbldatagen.datasets": [[31, 0, 0, "-", "basic_geometries"], [32, 0, 0, "-", "basic_process_historian"], [33, 0, 0, "-", "basic_telematics"], [34, 0, 0, "-", "basic_user"], [35, 0, 0, "-", "benchmark_groupby"], [36, 0, 0, "-", "dataset_provider"], [37, 0, 0, "-", "multi_table_telephony_provider"]], "dbldatagen.datasets.basic_geometries": [[31, 1, 1, "", "BasicGeometriesProvider"]], "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider": [[31, 4, 1, "", "ALLOWED_OPTIONS"], [31, 4, 1, "", "COLUMN_COUNT"], [31, 4, 1, "", "MAX_LOCATION_ID"], [31, 4, 1, "", "MIN_LOCATION_ID"], [31, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets.basic_process_historian": [[32, 1, 1, "", "BasicProcessHistorianProvider"]], "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider": [[32, 4, 1, "", "ALLOWED_OPTIONS"], [32, 4, 1, "", "COLUMN_COUNT"], [32, 4, 1, "", "DEFAULT_END_TIMESTAMP"], [32, 4, 1, "", "DEFAULT_NUM_DEVICES"], [32, 4, 1, "", "DEFAULT_NUM_PLANTS"], [32, 4, 1, "", "DEFAULT_NUM_TAGS"], [32, 4, 1, "", "DEFAULT_START_TIMESTAMP"], [32, 4, 1, "", "MAX_DEVICE_ID"], [32, 4, 1, "", "MAX_PROPERTY_VALUE"], [32, 4, 1, "", "MIN_DEVICE_ID"], [32, 4, 1, "", "MIN_PROPERTY_VALUE"], [32, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets.basic_telematics": [[33, 1, 1, "", "BasicTelematicsProvider"]], "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider": [[33, 4, 1, "", "ALLOWED_OPTIONS"], [33, 4, 1, "", "COLUMN_COUNT"], [33, 4, 1, "", "DEFAULT_END_TIMESTAMP"], [33, 4, 1, "", "DEFAULT_MAX_LAT"], [33, 4, 1, "", "DEFAULT_MAX_LON"], [33, 4, 1, "", "DEFAULT_MIN_LAT"], [33, 4, 1, "", "DEFAULT_MIN_LON"], [33, 4, 1, "", "DEFAULT_NUM_DEVICES"], [33, 4, 1, "", "DEFAULT_START_TIMESTAMP"], [33, 4, 1, "", "MAX_DEVICE_ID"], [33, 4, 1, "", "MIN_DEVICE_ID"], [33, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets.basic_user": [[34, 1, 1, "", "BasicUserProvider"]], "dbldatagen.datasets.basic_user.BasicUserProvider": [[34, 4, 1, "", "COLUMN_COUNT"], [34, 4, 1, "", "MAX_LONG"], [34, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets.benchmark_groupby": [[35, 1, 1, "", "BenchmarkGroupByProvider"]], "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider": [[35, 4, 1, "", "ALLOWED_OPTIONS"], [35, 4, 1, "", "COLUMN_COUNT"], [35, 4, 1, "", "DEFAULT_NUM_GROUPS"], [35, 4, 1, "", "DEFAULT_PCT_NULLS"], [35, 4, 1, "", "MAX_LONG"], [35, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets.dataset_provider": [[36, 1, 1, "", "DatasetProvider"], [36, 5, 1, "", "dataset_definition"]], "dbldatagen.datasets.dataset_provider.DatasetProvider": [[36, 4, 1, "", "DEFAULT_PARTITIONS"], [36, 4, 1, "", "DEFAULT_ROWS"], [36, 4, 1, "", "DEFAULT_TABLE_NAME"], [36, 1, 1, "", "DatasetDecoratorUtils"], [36, 1, 1, "", "DatasetDefinition"], [36, 1, 1, "", "NoAssociatedDatasetsMixin"], [36, 3, 1, "", "allowed_options"], [36, 3, 1, "", "autoComputePartitions"], [36, 3, 1, "", "checkOptions"], [36, 3, 1, "", "getAssociatedDataset"], [36, 3, 1, "", "getDatasetDefinition"], [36, 3, 1, "", "getDatasetTables"], [36, 3, 1, "", "getRegisteredDatasets"], [36, 3, 1, "", "getRegisteredDatasetsVersion"], [36, 3, 1, "", "getTableGenerator"], [36, 3, 1, "", "isValidDataProviderType"], [36, 3, 1, "", "registerDataset"], [36, 3, 1, "", "unregisterDataset"]], "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDecoratorUtils": [[36, 3, 1, "", "mkClass"]], "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition": [[36, 4, 1, "", "associatedDatasets"], [36, 4, 1, "", "description"], [36, 4, 1, "", "name"], [36, 4, 1, "", "primaryTable"], [36, 4, 1, "", "providerClass"], [36, 4, 1, "", "summary"], [36, 4, 1, "", "supportsStreaming"], [36, 4, 1, "", "tables"]], "dbldatagen.datasets.dataset_provider.DatasetProvider.NoAssociatedDatasetsMixin": [[36, 3, 1, "", "getAssociatedDataset"]], "dbldatagen.datasets.multi_table_telephony_provider": [[37, 1, 1, "", "MultiTableTelephonyProvider"]], "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider": [[37, 4, 1, "", "CUSTOMER_MIN_VALUE"], [37, 4, 1, "", "DEFAULT_AVG_EVENTS_PER_CUSTOMER"], [37, 4, 1, "", "DEFAULT_NUM_CUSTOMERS"], [37, 4, 1, "", "DEFAULT_NUM_DAYS"], [37, 4, 1, "", "DEFAULT_NUM_PLANS"], [37, 4, 1, "", "DEVICE_MIN_VALUE"], [37, 4, 1, "", "MAX_LONG"], [37, 4, 1, "", "PLAN_MIN_VALUE"], [37, 4, 1, "", "SUBSCRIBER_NUM_MIN_VALUE"], [37, 3, 1, "", "getAssociatedDataset"], [37, 3, 1, "", "getCustomers"], [37, 3, 1, "", "getDeviceEvents"], [37, 3, 1, "", "getPlans"], [37, 3, 1, "", "getTableGenerator"]], "dbldatagen.datasets_object": [[38, 1, 1, "", "Datasets"]], "dbldatagen.datasets_object.Datasets": [[38, 1, 1, "", "NavigatorNode"], [38, 3, 1, "", "describe"], [38, 3, 1, "", "get"], [38, 3, 1, "", "getAssociatedDataset"], [38, 3, 1, "", "getCombinedDataset"], [38, 3, 1, "", "getEnrichedDataset"], [38, 3, 1, "", "getProviderDefinitions"], [38, 3, 1, "", "getSummaryDataset"], [38, 3, 1, "", "getSupportingDataset"], [38, 3, 1, "", "list"]], "dbldatagen.datasets_object.Datasets.NavigatorNode": [[38, 3, 1, "", "addEntry"], [38, 3, 1, "", "find"], [38, 3, 1, "", "isFinal"]], "dbldatagen.daterange": [[39, 1, 1, "", "DateRange"]], "dbldatagen.daterange.DateRange": [[39, 4, 1, "", "DEFAULT_DATE_FORMAT"], [39, 4, 1, "", "DEFAULT_END_DATE"], [39, 4, 1, "", "DEFAULT_END_DATE_TIMESTAMP"], [39, 4, 1, "", "DEFAULT_END_TIMESTAMP"], [39, 4, 1, "", "DEFAULT_START_DATE"], [39, 4, 1, "", "DEFAULT_START_DATE_TIMESTAMP"], [39, 4, 1, "", "DEFAULT_START_TIMESTAMP"], [39, 4, 1, "", "DEFAULT_UTC_TS_FORMAT"], [39, 3, 1, "", "adjustForColumnDatatype"], [39, 3, 1, "", "computeDateRange"], [39, 3, 1, "", "computeTimestampIntervals"], [39, 3, 1, "", "computeTimestampRange"], [39, 3, 1, "", "getContinuousRange"], [39, 3, 1, "", "getDiscreteRange"], [39, 3, 1, "", "getScale"], [39, 3, 1, "", "isEmpty"], [39, 3, 1, "", "isFullyPopulated"], [39, 3, 1, "", "parseInterval"]], "dbldatagen.distributions": [[41, 0, 0, "-", "beta"], [42, 0, 0, "-", "data_distribution"], [43, 0, 0, "-", "exponential_distribution"], [44, 0, 0, "-", "gamma"], [45, 0, 0, "-", "normal_distribution"]], "dbldatagen.distributions.beta": [[41, 1, 1, "", "Beta"]], "dbldatagen.distributions.beta.Beta": [[41, 2, 1, "", "alpha"], [41, 2, 1, "", "beta"], [41, 3, 1, "", "beta_func"], [41, 3, 1, "", "generateNormalizedDistributionSample"]], "dbldatagen.distributions.data_distribution": [[42, 1, 1, "", "DataDistribution"]], "dbldatagen.distributions.data_distribution.DataDistribution": [[42, 3, 1, "", "generateNormalizedDistributionSample"], [42, 3, 1, "", "get_np_random_generator"], [42, 2, 1, "", "randomSeed"], [42, 2, 1, "", "rounding"], [42, 3, 1, "", "withRandomSeed"], [42, 3, 1, "", "withRounding"]], "dbldatagen.distributions.exponential_distribution": [[43, 1, 1, "", "Exponential"]], "dbldatagen.distributions.exponential_distribution.Exponential": [[43, 3, 1, "", "exponential_func"], [43, 3, 1, "", "generateNormalizedDistributionSample"], [43, 2, 1, "", "rate"], [43, 2, 1, "", "scale"]], "dbldatagen.distributions.gamma": [[44, 1, 1, "", "Gamma"]], "dbldatagen.distributions.gamma.Gamma": [[44, 3, 1, "", "gamma_func"], [44, 3, 1, "", "generateNormalizedDistributionSample"], [44, 2, 1, "", "scale"], [44, 2, 1, "", "shape"]], "dbldatagen.distributions.normal_distribution": [[45, 1, 1, "", "Normal"]], "dbldatagen.distributions.normal_distribution.Normal": [[45, 3, 1, "", "generateNormalizedDistributionSample"], [45, 3, 1, "", "normal_func"], [45, 3, 1, "", "standardNormal"]], "dbldatagen.function_builder": [[46, 1, 1, "", "ColumnGeneratorBuilder"]], "dbldatagen.function_builder.ColumnGeneratorBuilder": [[46, 3, 1, "", "mkExprChoicesFn"]], "dbldatagen.html_utils": [[47, 1, 1, "", "HtmlUtils"]], "dbldatagen.html_utils.HtmlUtils": [[47, 3, 1, "", "formatCodeAsHtml"], [47, 3, 1, "", "formatTextAsHtml"]], "dbldatagen.nrange": [[48, 1, 1, "", "NRange"]], "dbldatagen.nrange.NRange": [[48, 3, 1, "", "adjustForColumnDatatype"], [48, 3, 1, "", "getContinuousRange"], [48, 3, 1, "", "getDiscreteRange"], [48, 3, 1, "", "getScale"], [48, 3, 1, "", "isEmpty"], [48, 3, 1, "", "isFullyPopulated"]], "dbldatagen.schema_parser": [[49, 1, 1, "", "SchemaParser"]], "dbldatagen.schema_parser.SchemaParser": [[49, 3, 1, "", "columnTypeFromString"], [49, 3, 1, "", "columnsReferencesFromSQLString"], [49, 3, 1, "", "getTypeDefinitionParser"], [49, 3, 1, "", "parseCreateTable"]], "dbldatagen.spark_singleton": [[50, 1, 1, "", "SparkSingleton"]], "dbldatagen.spark_singleton.SparkSingleton": [[50, 3, 1, "", "getInstance"], [50, 3, 1, "", "getLocalInstance"]], "dbldatagen.text_generator_plugins": [[51, 1, 1, "", "FakerTextFactory"], [51, 1, 1, "", "PyfuncText"], [51, 1, 1, "", "PyfuncTextFactory"], [51, 5, 1, "", "fakerText"]], "dbldatagen.text_generator_plugins.PyfuncText": [[51, 3, 1, "", "pandasGenerateText"]], "dbldatagen.text_generator_plugins.PyfuncTextFactory": [[51, 3, 1, "", "withInit"], [51, 3, 1, "", "withInitPerBatch"], [51, 3, 1, "", "withRootProperty"]], "dbldatagen.text_generators": [[52, 1, 1, "", "ILText"], [52, 1, 1, "", "TemplateGenerator"], [52, 1, 1, "", "TextGenerator"]], "dbldatagen.text_generators.ILText": [[52, 3, 1, "", "classicGenerateText"], [52, 3, 1, "", "generateText"], [52, 3, 1, "", "pandasGenerateText"]], "dbldatagen.text_generators.TemplateGenerator": [[52, 3, 1, "", "classicGenerateText"], [52, 3, 1, "", "pandasGenerateText"], [52, 2, 1, "", "templates"]], "dbldatagen.text_generators.TextGenerator": [[52, 3, 1, "", "compactNumpyTypeForValues"], [52, 3, 1, "", "getAsTupleOrElse"], [52, 3, 1, "", "getNPRandomGenerator"], [52, 2, 1, "", "randomSeed"], [52, 3, 1, "", "withRandomSeed"]], "dbldatagen.utils": [[53, 6, 1, "", "DataGenError"], [53, 5, 1, "", "coalesce_values"], [53, 5, 1, "", "deprecated"], [53, 5, 1, "", "ensure"], [53, 5, 1, "", "json_value_from_path"], [53, 5, 1, "", "mkBoundsList"], [53, 5, 1, "", "parse_time_interval"], [53, 5, 1, "", "split_list_matching_condition"], [53, 5, 1, "", "strip_margins"], [53, 5, 1, "", "system_time_millis"], [53, 5, 1, "", "topologicalSort"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"get": [0, 8, 64], "start": [0, 8], "databrick": [0, 8, 9, 55, 56], "lab": [0, 8, 9, 55, 56], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 34, 55, 56, 57, 58, 59, 60, 62, 63, 65], "gener": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 55, 56, 57, 58, 59, 60, 62, 63, 64], "overview": [0, 4], "environ": [0, 56], "compat": [0, 56], "tutori": 0, "exampl": [0, 1, 2, 3, 11, 12, 59, 62, 65], "basic": [0, 31, 32, 33, 34], "concept": 0, "synthet": [0, 6, 55, 63], "creat": [0, 4, 56], "simpl": [0, 64], "set": [0, 6, 34, 56, 60], "without": 0, "pre": 0, "exist": [0, 6, 60], "schema": [0, 6], "ad": [0, 5, 55], "dataspec": 0, "match": 0, "multipl": [0, 11, 12], "column": [0, 5, 7, 12, 59, 61], "code": [0, 6, 56, 65], "from": [0, 6, 9, 60], "an": [0, 3, 60], "spark": [0, 56], "datafram": [0, 7], "A": 0, "more": [0, 12], "complex": [0, 5, 7], "build": [0, 56, 61], "devic": [0, 11], "iot": [0, 59, 65], "scale": 0, "up": [0, 56], "us": [0, 1, 3, 7, 11, 12, 56, 59, 60, 61, 62, 63, 64, 65], "sql": [0, 12, 60], "repeat": [0, 59], "understand": 1, "rang": 1, "preced": 1, "rule": 1, "constrain": 1, "valu": [1, 7, 12, 59, 60], "handl": 1, "date": 1, "timestamp": 1, "recommend": 1, "conform": 2, "known": 2, "statist": 2, "distribut": [2, 40, 41, 42, 43, 44, 45, 57], "extend": 3, "text": [3, 60], "python": [3, 56], "function": [3, 11, 57], "1": [3, 55, 65], "custom": [3, 11, 12, 60, 61, 64], "3rd": 3, "parti": 3, "librari": 3, "2": [3, 55, 65], "extern": 3, "support": 3, "syntax": 3, "integr": [3, 56], "faker": 3, "specif": [3, 7, 12, 60], "chang": [4, 55], "captur": 4, "tabl": [4, 8, 11, 63, 64, 65], "definit": 4, "merg": 4, "initi": 5, "spec": [5, 12], "struct": 5, "map": 5, "arrai": [5, 7], "The": [5, 57], "mechan": 5, "experiment": [6, 64], "analyz": 6, "synthes": 6, "produc": 6, "json": 7, "structur": 7, "write": 7, "nest": 7, "field": [7, 59], "infer": 7, "datatyp": 7, "multi": [7, 64], "featur": [7, 12, 55], "document": [8, 56], "api": [8, 57], "develop": [8, 56, 64], "licens": [8, 10, 56], "indic": 8, "instal": [9, 63], "note": [9, 55, 64], "pypi": 9, "repositori": 9, "sourc": [9, 63], "older": 9, "releas": [9, 55], "manual": 9, "addit": [9, 12, 64], "inform": 9, "telephoni": 11, "bill": 11, "some": 11, "util": [11, 53], "let": 11, "": 11, "model": 11, "our": 11, "call": 11, "plan": 11, "now": 11, "event": 11, "comput": [11, 61], "invoic": 11, "option": [12, 60, 64], "same": 12, "random": [12, 59, 60], "control": [12, 62], "detail": [12, 64], "view": 12, "automat": 12, "stream": [12, 65], "dbldatagen": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "packag": [13, 16, 30, 40, 56, 57], "subpackag": 13, "submodul": [13, 16, 30, 40], "modul": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "content": [13, 16, 30, 40], "column_generation_spec": 14, "column_spec_opt": 15, "constraint": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 57, 62], "chained_rel": 17, "literal_range_constraint": 19, "literal_relation_constraint": 20, "negative_valu": 21, "positive_valu": 22, "ranged_values_constraint": 23, "sql_expr": 24, "unique_combin": 25, "data_analyz": 26, "data_gener": 27, "datagen_const": 28, "datarang": 29, "dataset": [30, 31, 32, 33, 34, 35, 36, 37, 57, 64], "basic_geometri": 31, "geometri": 31, "wkt": 31, "basic_process_historian": 32, "process": 32, "historian": 32, "basic_telemat": 33, "telemat": 33, "basic_us": 34, "user": [34, 57], "benchmark_groupbi": 35, "group": 35, "benchmark": 35, "dataset_provid": 36, "multi_table_telephony_provid": 37, "datasets_object": 38, "daterang": 39, "beta": 41, "data_distribut": 42, "exponential_distribut": 43, "gamma": 44, "normal_distribut": 45, "function_build": 46, "html_util": 47, "nrang": 48, "schema_pars": 49, "spark_singleton": 50, "text_generator_plugin": 51, "text_gener": 52, "histori": 55, "version": 55, "0": 55, "4": 55, "3": 55, "6": 55, "post": 55, "fix": 55, "5": 55, "acknowledg": 55, "3post2": 55, "requir": 55, "contribut": 56, "depend": [56, 58, 61], "check": 56, "your": 56, "common": [56, 61], "issu": [56, 61], "step": 56, "conda": 56, "pipenv": 56, "html": 56, "wheel": 56, "test": 56, "new": 56, "run": 56, "unit": 56, "style": [56, 65], "quick": [57, 64], "index": 57, "main": 57, "face": 57, "class": 57, "type": 57, "intern": 57, "relat": 57, "framework": 58, "true": 59, "hash": 59, "name": [59, 61], "algorithm": 59, "revisit": 59, "manipul": 60, "format": 60, "base": 60, "express": 60, "transform": 60, "purpos": 60, "templategener": 60, "word": 60, "list": [60, 64], "other": 60, "form": 60, "lookup": 60, "troubleshoot": 61, "tool": 61, "aid": 61, "datagener": 61, "explain": 61, "method": 61, "oper": 61, "messag": 61, "log": 61, "examin": 61, "output": 61, "resolut": 61, "attempt": 61, "add": 61, "id": 61, "seed": 61, "befor": 61, "ar": [61, 62], "order": 61, "how": 62, "implement": 62, "limit": 62, "delta": [63, 65], "live": 63, "notebook": 63, "defin": 63, "dlt": 63, "easi": 64, "standard": 64, "row": 64, "partit": 64, "pass": 64, "avail": 64, "site": 65, "technologi": 65}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Getting Started with the Databricks Labs Data Generator": [[0, "getting-started-with-the-databricks-labs-data-generator"]], "General Overview": [[0, "general-overview"]], "Databricks environment compatibility": [[0, "databricks-environment-compatibility"]], "Tutorials and examples": [[0, "tutorials-and-examples"]], "Basic concepts": [[0, "basic-concepts"]], "Generating the synthetic data": [[0, "generating-the-synthetic-data"]], "Getting started": [[0, "getting-started"]], "Creating simple synthetic data sets": [[0, "creating-simple-synthetic-data-sets"]], "Create a data set without pre-existing schemas": [[0, "create-a-data-set-without-pre-existing-schemas"]], "Creating data set with pre-existing schema": [[0, "creating-data-set-with-pre-existing-schema"]], "Adding dataspecs to match multiple columns": [[0, "adding-dataspecs-to-match-multiple-columns"]], "Generating code from existing an schema or Spark dataframe": [[0, "generating-code-from-existing-an-schema-or-spark-dataframe"]], "A more complex example - building Device IOT synthetic Data": [[0, "a-more-complex-example-building-device-iot-synthetic-data"]], "Scaling it up": [[0, "scaling-it-up"]], "Using SQL in data generation": [[0, "using-sql-in-data-generation"]], "Generating repeatable data": [[0, "generating-repeatable-data"]], "Using generated data from SQL": [[0, "using-generated-data-from-sql"]], "Understanding and Using Data Ranges": [[1, "understanding-and-using-data-ranges"]], "Precedence rules for constraining the range of values": [[1, "precedence-rules-for-constraining-the-range-of-values"]], "Handling of dates and timestamps": [[1, "handling-of-dates-and-timestamps"]], "Examples": [[1, "examples"], [2, "examples"]], "Recommendations": [[1, "recommendations"]], "Generating Data that Conforms to a Known Statistical Distribution": [[2, "generating-data-that-conforms-to-a-known-statistical-distribution"]], "Extending Text Generation": [[3, "extending-text-generation"]], "Extended text generation with Python functions": [[3, "extended-text-generation-with-python-functions"]], "Example 1: Using a custom Python function": [[3, "example-1-using-a-custom-python-function"]], "Extended text generation with 3rd party libraries": [[3, "extended-text-generation-with-3rd-party-libraries"]], "Example 2: Using an external text data generation library": [[3, "example-2-using-an-external-text-data-generation-library"]], "Supporting extended syntax for 3rd party library integration": [[3, "supporting-extended-syntax-for-3rd-party-library-integration"]], "Faker specific library integration": [[3, "faker-specific-library-integration"]], "Generating Change Data Capture Data": [[4, "generating-change-data-capture-data"]], "Overview": [[4, "overview"]], "Creating a table definition": [[4, "creating-a-table-definition"]], "Creating Changes": [[4, "creating-changes"]], "Merging in the changes": [[4, "merging-in-the-changes"]], "Generating Column Data": [[5, "generating-column-data"]], "Initializing a data generation spec": [[5, "initializing-a-data-generation-spec"]], "Adding columns to a data generation spec": [[5, "adding-columns-to-a-data-generation-spec"]], "Generating complex columns - structs, maps, arrays": [[5, "generating-complex-columns-structs-maps-arrays"]], "The mechanics of column data generation": [[5, "the-mechanics-of-column-data-generation"]], "Generating Synthetic Data from Existing Data or Schema (Experimental)": [[6, "generating-synthetic-data-from-existing-data-or-schema-experimental"]], "Analyzing the data to be synthesized": [[6, "analyzing-the-data-to-be-synthesized"]], "Generating code to produce the synthetic data set": [[6, "generating-code-to-produce-the-synthetic-data-set"]], "Generating JSON and Structured Column Data": [[7, "generating-json-and-structured-column-data"]], "Generating JSON data": [[7, "generating-json-data"]], "Writing dataframe as JSON data": [[7, "writing-dataframe-as-json-data"]], "Use of nested structures in data generation specifications": [[7, "use-of-nested-structures-in-data-generation-specifications"]], "Generating JSON valued fields": [[7, "generating-json-valued-fields"]], "Generating complex column data": [[7, "generating-complex-column-data"]], "Using inferred datatypes": [[7, "using-inferred-datatypes"]], "Using multi feature columns to generate arrays": [[7, "using-multi-feature-columns-to-generate-arrays"]], "Databricks Labs Data Generator Documentation": [[8, "databricks-labs-data-generator-documentation"]], "Getting Started": [[8, null]], "API": [[8, null]], "Development": [[8, null]], "License": [[8, null], [10, "license"], [56, "license"]], "Indices and tables": [[8, "indices-and-tables"]], "Installation Notes": [[9, "installation-notes"]], "Installing from PyPi": [[9, "installing-from-pypi"]], "Installing from Databricks Labs repository source": [[9, "installing-from-databricks-labs-repository-source"]], "Installing older releases": [[9, "installing-older-releases"]], "Manual installation": [[9, "manual-installation"]], "Additional information": [[9, "additional-information"]], "Generating and Using Data with Multiple Tables": [[11, "generating-and-using-data-with-multiple-tables"]], "Telephony billing example": [[11, "telephony-billing-example"]], "Some utility functions": [[11, "some-utility-functions"]], "Let\u2019s model our calling plans": [[11, "let-s-model-our-calling-plans"]], "Let\u2019s model our customers": [[11, "let-s-model-our-customers"]], "Now let\u2019s model our device events": [[11, "now-let-s-model-our-device-events"]], "Now let\u2019s compute the invoices": [[11, "now-let-s-compute-the-invoices"]], "Options and Additional Features": [[12, "options-and-additional-features"]], "Options for column specification": [[12, "options-for-column-specification"]], "Generating multiple columns with same generation spec": [[12, "generating-multiple-columns-with-same-generation-spec"]], "Generating random values": [[12, "generating-random-values"]], "Using custom SQL to control data generation": [[12, "using-custom-sql-to-control-data-generation"]], "More details": [[12, "more-details"]], "Example": [[12, "example"], [62, "example"]], "Generating views automatically": [[12, "generating-views-automatically"]], "Generating streaming data": [[12, "generating-streaming-data"]], "dbldatagen package": [[13, "dbldatagen-package"]], "Subpackages": [[13, "subpackages"]], "Submodules": [[13, "submodules"], [16, "submodules"], [30, "submodules"], [40, "submodules"]], "Module contents": [[13, "module-dbldatagen"], [16, "module-dbldatagen.constraints"], [30, "module-dbldatagen.datasets"], [40, "module-dbldatagen.distributions"]], "dbldatagen.column_generation_spec module": [[14, "module-dbldatagen.column_generation_spec"]], "dbldatagen.column_spec_options module": [[15, "module-dbldatagen.column_spec_options"]], "dbldatagen.constraints package": [[16, "dbldatagen-constraints-package"]], "dbldatagen.constraints.chained_relation module": [[17, "module-dbldatagen.constraints.chained_relation"]], "dbldatagen.constraints.constraint module": [[18, "module-dbldatagen.constraints.constraint"]], "dbldatagen.constraints.literal_range_constraint module": [[19, "module-dbldatagen.constraints.literal_range_constraint"]], "dbldatagen.constraints.literal_relation_constraint module": [[20, "module-dbldatagen.constraints.literal_relation_constraint"]], "dbldatagen.constraints.negative_values module": [[21, "module-dbldatagen.constraints.negative_values"]], "dbldatagen.constraints.positive_values module": [[22, "module-dbldatagen.constraints.positive_values"]], "dbldatagen.constraints.ranged_values_constraint module": [[23, "module-dbldatagen.constraints.ranged_values_constraint"]], "dbldatagen.constraints.sql_expr module": [[24, "module-dbldatagen.constraints.sql_expr"]], "dbldatagen.constraints.unique_combinations module": [[25, "module-dbldatagen.constraints.unique_combinations"]], "dbldatagen.data_analyzer module": [[26, "module-dbldatagen.data_analyzer"]], "dbldatagen.data_generator module": [[27, "module-dbldatagen.data_generator"]], "dbldatagen.datagen_constants module": [[28, "module-dbldatagen.datagen_constants"]], "dbldatagen.datarange module": [[29, "module-dbldatagen.datarange"]], "dbldatagen.datasets package": [[30, "dbldatagen-datasets-package"]], "dbldatagen.datasets.basic_geometries module": [[31, "module-dbldatagen.datasets.basic_geometries"]], "Basic Geometry WKT Dataset": [[31, "basic-geometry-wkt-dataset"]], "dbldatagen.datasets.basic_process_historian module": [[32, "module-dbldatagen.datasets.basic_process_historian"]], "Basic Process Historian Dataset": [[32, "basic-process-historian-dataset"]], "dbldatagen.datasets.basic_telematics module": [[33, "module-dbldatagen.datasets.basic_telematics"]], "Basic Telematics Dataset": [[33, "basic-telematics-dataset"]], "dbldatagen.datasets.basic_user module": [[34, "module-dbldatagen.datasets.basic_user"]], "Basic User Data Set": [[34, "basic-user-data-set"]], "dbldatagen.datasets.benchmark_groupby module": [[35, "module-dbldatagen.datasets.benchmark_groupby"]], "Grouping Benchmark Dataset": [[35, "grouping-benchmark-dataset"]], "dbldatagen.datasets.dataset_provider module": [[36, "module-dbldatagen.datasets.dataset_provider"]], "dbldatagen.datasets.multi_table_telephony_provider module": [[37, "module-dbldatagen.datasets.multi_table_telephony_provider"]], "dbldatagen.datasets_object module": [[38, "module-dbldatagen.datasets_object"]], "dbldatagen.daterange module": [[39, "module-dbldatagen.daterange"]], "dbldatagen.distributions package": [[40, "dbldatagen-distributions-package"]], "dbldatagen.distributions.beta module": [[41, "module-dbldatagen.distributions.beta"]], "dbldatagen.distributions.data_distribution module": [[42, "module-dbldatagen.distributions.data_distribution"]], "dbldatagen.distributions.exponential_distribution module": [[43, "module-dbldatagen.distributions.exponential_distribution"]], "dbldatagen.distributions.gamma module": [[44, "module-dbldatagen.distributions.gamma"]], "dbldatagen.distributions.normal_distribution module": [[45, "module-dbldatagen.distributions.normal_distribution"]], "dbldatagen.function_builder module": [[46, "module-dbldatagen.function_builder"]], "dbldatagen.html_utils module": [[47, "module-dbldatagen.html_utils"]], "dbldatagen.nrange module": [[48, "module-dbldatagen.nrange"]], "dbldatagen.schema_parser module": [[49, "module-dbldatagen.schema_parser"]], "dbldatagen.spark_singleton module": [[50, "module-dbldatagen.spark_singleton"]], "dbldatagen.text_generator_plugins module": [[51, "module-dbldatagen.text_generator_plugins"]], "dbldatagen.text_generators module": [[52, "module-dbldatagen.text_generators"]], "dbldatagen.utils module": [[53, "module-dbldatagen.utils"]], "dbldatagen": [[54, "dbldatagen"]], "Databricks Labs Synthetic Data Generator Release Notes": [[55, "databricks-labs-synthetic-data-generator-release-notes"]], "Change History": [[55, "change-history"]], "Version 0.4.0": [[55, "version-0-4-0"]], "Changed": [[55, "changed"], [55, "id1"], [55, "id2"], [55, "id3"], [55, "id4"], [55, "id7"], [55, "id9"], [55, "id12"], [55, "id16"]], "Added": [[55, "added"], [55, "id8"], [55, "id11"], [55, "id14"], [55, "id18"]], "Version 0.3.6 Post 1": [[55, "version-0-3-6-post-1"]], "Fixed": [[55, "fixed"], [55, "id5"], [55, "id6"], [55, "id10"], [55, "id13"], [55, "id17"]], "Version 0.3.6": [[55, "version-0-3-6"]], "Notes": [[55, "notes"], [55, "id15"], [55, "id19"]], "Version 0.3.5": [[55, "version-0-3-5"]], "Version 0.3.4 Post 3": [[55, "version-0-3-4-post-3"]], "Version 0.3.4 Post 2": [[55, "version-0-3-4-post-2"]], "Version 0.3.4 Post 1": [[55, "version-0-3-4-post-1"]], "Acknowledgements": [[55, "acknowledgements"]], "Version 0.3.4": [[55, "version-0-3-4"]], "Version 0.3.3post2": [[55, "version-0-3-3post2"]], "Version 0.3.2": [[55, "version-0-3-2"]], "Version 0.3.1": [[55, "version-0-3-1"]], "Version 0.3.0": [[55, "version-0-3-0"]], "Changes": [[55, "changes"]], "Version 0.2.1": [[55, "version-0-2-1"]], "Features": [[55, "features"]], "General Requirements": [[55, "general-requirements"]], "Contributing to the Databricks Labs Data Generator": [[56, "contributing-to-the-databricks-labs-data-generator"]], "Building the code": [[56, "building-the-code"]], "Package Dependencies": [[56, "package-dependencies"]], "Python compatibility": [[56, "python-compatibility"]], "Checking your code for common issues": [[56, "checking-your-code-for-common-issues"]], "Setting up your build environment": [[56, "setting-up-your-build-environment"]], "Build steps": [[56, "build-steps"]], "Spark dependencies": [[56, "spark-dependencies"]], "Building with Conda": [[56, "building-with-conda"]], "Building with Pipenv": [[56, "building-with-pipenv"]], "Creating the HTML documentation": [[56, "creating-the-html-documentation"]], "Building the Python wheel": [[56, "building-the-python-wheel"]], "Testing": [[56, "testing"]], "Developing new tests": [[56, "developing-new-tests"]], "Running unit / integration tests": [[56, "running-unit-integration-tests"]], "Using the Databricks Labs data generator": [[56, "using-the-databricks-labs-data-generator"]], "Coding Style": [[56, "coding-style"]], "Quick API Index": [[57, "quick-api-index"]], "The dbldatagen package": [[57, "the-dbldatagen-package"]], "Main user facing classes, functions and types": [[57, "main-user-facing-classes-functions-and-types"]], "Internal classes, functions and types": [[57, "internal-classes-functions-and-types"]], "The dbldatagen.constraints package": [[57, "the-dbldatagen-constraints-package"]], "Data generation constraints related classes, functions and types": [[57, "data-generation-constraints-related-classes-functions-and-types"]], "The dbldatagen.datasets package": [[57, "the-dbldatagen-datasets-package"]], "The dbldatagen.distributions package": [[57, "the-dbldatagen-distributions-package"]], "Data distribution related classes, functions and types": [[57, "data-distribution-related-classes-functions-and-types"]], "Dependencies for the Data Generator framework": [[58, "dependencies-for-the-data-generator-framework"]], "Repeatable Data Generation": [[59, "repeatable-data-generation"]], "Generating random data": [[59, "generating-random-data"]], "True random Data": [[59, "true-random-data"]], "Use of Hashed field names": [[59, "use-of-hashed-field-names"]], "Data Generation algorithm": [[59, "data-generation-algorithm"]], "Column Value Generation": [[59, "column-value-generation"]], "Revisiting the IOT data example": [[59, "revisiting-the-iot-data-example"]], "Generating and Manipulating Text Data": [[60, "generating-and-manipulating-text-data"]], "Generating data from a specific set of values": [[60, "generating-data-from-a-specific-set-of-values"]], "Generating text from existing values": [[60, "generating-text-from-existing-values"]], "Formatting text based on an existing value": [[60, "formatting-text-based-on-an-existing-value"]], "Using a SQL expression to transform existing or random values": [[60, "using-a-sql-expression-to-transform-existing-or-random-values"]], "Using Text Generators": [[60, "using-text-generators"]], "Using the general purpose text generator": [[60, "using-the-general-purpose-text-generator"]], "TemplateGenerator options": [[60, "templategenerator-options"]], "Using a custom word list": [[60, "using-a-custom-word-list"]], "Other forms of text value lookup": [[60, "other-forms-of-text-value-lookup"]], "Troubleshooting": [[61, "troubleshooting"]], "Tools and aids to troubleshooting": [[61, "tools-and-aids-to-troubleshooting"]], "Use of the datagenerator explain method": [[61, "use-of-the-datagenerator-explain-method"]], "Operational message logging": [[61, "operational-message-logging"]], "Logging": [[61, null]], "Examining log outputs": [[61, "examining-log-outputs"]], "Common issues and resolution": [[61, "common-issues-and-resolution"]], "Attempting to add a column named id": [[61, "attempting-to-add-a-column-named-id"]], "Customizing seed column": [[61, null]], "Attempting to compute column before dependent columns are computed": [[61, "attempting-to-compute-column-before-dependent-columns-are-computed"]], "Column build ordering": [[61, null]], "Using Constraints to control data generation": [[62, "using-constraints-to-control-data-generation"]], "How constraints are implemented": [[62, "how-constraints-are-implemented"]], "Limitations": [[62, "limitations"]], "Using the Data Generator with Delta Live Tables": [[63, "using-the-data-generator-with-delta-live-tables"]], "Installing the data generator in a Delta Live Tables notebook": [[63, "installing-the-data-generator-in-a-delta-live-tables-notebook"]], "Defining a DLT live table with synthetic data source": [[63, "defining-a-dlt-live-table-with-synthetic-data-source"]], "Using the synthetic data sources in Delta Live Tables": [[63, "using-the-synthetic-data-sources-in-delta-live-tables"]], "Quick and easy dataset generation with Standard Datasets (Experimental)": [[64, "quick-and-easy-dataset-generation-with-standard-datasets-experimental"]], "Simple use": [[64, "simple-use"]], "Customizing rows and partitions": [[64, "customizing-rows-and-partitions"]], "Passing additional options": [[64, "passing-additional-options"]], "Listing available datasets": [[64, "listing-available-datasets"]], "Getting details of a dataset": [[64, "getting-details-of-a-dataset"]], "Multi-table use": [[64, "multi-table-use"]], "Notes for developers": [[64, "notes-for-developers"]], "Using Streaming Data": [[65, "using-streaming-data"]], "Example 1: site code and technology": [[65, "example-1-site-code-and-technology"]], "Example 2: IOT style data": [[65, "example-2-iot-style-data"]], "Using streaming data with Delta tables": [[65, "using-streaming-data-with-delta-tables"]]}, "indexentries": {"dbldatagen": [[13, "module-dbldatagen"]], "module": [[13, "module-dbldatagen"], [14, "module-dbldatagen.column_generation_spec"], [15, "module-dbldatagen.column_spec_options"], [16, "module-dbldatagen.constraints"], [17, "module-dbldatagen.constraints.chained_relation"], [18, "module-dbldatagen.constraints.constraint"], [19, "module-dbldatagen.constraints.literal_range_constraint"], [20, "module-dbldatagen.constraints.literal_relation_constraint"], [21, "module-dbldatagen.constraints.negative_values"], [22, "module-dbldatagen.constraints.positive_values"], [23, "module-dbldatagen.constraints.ranged_values_constraint"], [24, "module-dbldatagen.constraints.sql_expr"], [25, "module-dbldatagen.constraints.unique_combinations"], [26, "module-dbldatagen.data_analyzer"], [27, "module-dbldatagen.data_generator"], [28, "module-dbldatagen.datagen_constants"], [29, "module-dbldatagen.datarange"], [30, "module-dbldatagen.datasets"], [31, "module-dbldatagen.datasets.basic_geometries"], [32, "module-dbldatagen.datasets.basic_process_historian"], [33, "module-dbldatagen.datasets.basic_telematics"], [34, "module-dbldatagen.datasets.basic_user"], [35, "module-dbldatagen.datasets.benchmark_groupby"], [36, "module-dbldatagen.datasets.dataset_provider"], [37, "module-dbldatagen.datasets.multi_table_telephony_provider"], [38, "module-dbldatagen.datasets_object"], [39, "module-dbldatagen.daterange"], [40, "module-dbldatagen.distributions"], [41, "module-dbldatagen.distributions.beta"], [42, "module-dbldatagen.distributions.data_distribution"], [43, "module-dbldatagen.distributions.exponential_distribution"], [44, "module-dbldatagen.distributions.gamma"], [45, "module-dbldatagen.distributions.normal_distribution"], [46, "module-dbldatagen.function_builder"], [47, "module-dbldatagen.html_utils"], [48, "module-dbldatagen.nrange"], [49, "module-dbldatagen.schema_parser"], [50, "module-dbldatagen.spark_singleton"], [51, "module-dbldatagen.text_generator_plugins"], [52, "module-dbldatagen.text_generators"], [53, "module-dbldatagen.utils"]], "columngenerationspec (class in dbldatagen.column_generation_spec)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec"]], "basecolumn (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.baseColumn"]], "basecolumns (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.baseColumns"]], "begin (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.begin"]], "datatype (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.datatype"]], "dbldatagen.column_generation_spec": [[14, "module-dbldatagen.column_generation_spec"]], "end (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.end"]], "expr (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.expr"]], "exprs (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.exprs"]], "getnames() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.getNames"]], "getnamesandtypes() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.getNamesAndTypes"]], "getorelse() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.getOrElse"]], "getplanentry() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.getPlanEntry"]], "inferdatatype (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.inferDatatype"]], "interval (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.interval"]], "isfieldomitted (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.isFieldOmitted"]], "israndom (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.isRandom"]], "isweightedvaluescolumn (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.isWeightedValuesColumn"]], "keys() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.keys"]], "makegenerationexpressions() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.makeGenerationExpressions"]], "max (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.max"]], "min (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.min"]], "numcolumns (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.numColumns"]], "numfeatures (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.numFeatures"]], "prefix (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.prefix"]], "randomseed (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.randomSeed"]], "setbasecolumndatatypes() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.setBaseColumnDatatypes"]], "specoptions (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.specOptions"]], "step (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.step"]], "structtype() (columngenerationspec method)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.structType"]], "suffix (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.suffix"]], "textgenerator (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.textGenerator"]], "text_separator (columngenerationspec property)": [[14, "dbldatagen.column_generation_spec.ColumnGenerationSpec.text_separator"]], "columnspecoptions (class in dbldatagen.column_spec_options)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions"]], "checkbooloption() (columnspecoptions method)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.checkBoolOption"]], "checkexclusiveoptions() (columnspecoptions method)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.checkExclusiveOptions"]], "checkoptionvalues() (columnspecoptions method)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.checkOptionValues"]], "checkvalidcolumnproperties() (columnspecoptions method)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.checkValidColumnProperties"]], "dbldatagen.column_spec_options": [[15, "module-dbldatagen.column_spec_options"]], "getorelse() (columnspecoptions method)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.getOrElse"]], "options (columnspecoptions property)": [[15, "dbldatagen.column_spec_options.ColumnSpecOptions.options"]], "dbldatagen.constraints": [[16, "module-dbldatagen.constraints"]], "chainedrelation (class in dbldatagen.constraints.chained_relation)": [[17, "dbldatagen.constraints.chained_relation.ChainedRelation"]], "dbldatagen.constraints.chained_relation": [[17, "module-dbldatagen.constraints.chained_relation"]], "constraint (class in dbldatagen.constraints.constraint)": [[18, "dbldatagen.constraints.constraint.Constraint"]], "nofiltermixin (class in dbldatagen.constraints.constraint)": [[18, "dbldatagen.constraints.constraint.NoFilterMixin"]], "nopreparetransformmixin (class in dbldatagen.constraints.constraint)": [[18, "dbldatagen.constraints.constraint.NoPrepareTransformMixin"]], "supported_operators (constraint attribute)": [[18, "dbldatagen.constraints.constraint.Constraint.SUPPORTED_OPERATORS"]], "dbldatagen.constraints.constraint": [[18, "module-dbldatagen.constraints.constraint"]], "filterexpression (constraint property)": [[18, "dbldatagen.constraints.constraint.Constraint.filterExpression"]], "mkcombinedconstraintexpression() (constraint static method)": [[18, "dbldatagen.constraints.constraint.Constraint.mkCombinedConstraintExpression"]], "preparedatagenerator() (constraint method)": [[18, "dbldatagen.constraints.constraint.Constraint.prepareDataGenerator"]], "preparedatagenerator() (nopreparetransformmixin method)": [[18, "dbldatagen.constraints.constraint.NoPrepareTransformMixin.prepareDataGenerator"]], "supportsstreaming (constraint property)": [[18, "dbldatagen.constraints.constraint.Constraint.supportsStreaming"]], "transformdataframe() (constraint method)": [[18, "dbldatagen.constraints.constraint.Constraint.transformDataframe"]], "transformdataframe() (nopreparetransformmixin method)": [[18, "dbldatagen.constraints.constraint.NoPrepareTransformMixin.transformDataframe"]], "literalrange (class in dbldatagen.constraints.literal_range_constraint)": [[19, "dbldatagen.constraints.literal_range_constraint.LiteralRange"]], "dbldatagen.constraints.literal_range_constraint": [[19, "module-dbldatagen.constraints.literal_range_constraint"]], "literalrelation (class in dbldatagen.constraints.literal_relation_constraint)": [[20, "dbldatagen.constraints.literal_relation_constraint.LiteralRelation"]], "dbldatagen.constraints.literal_relation_constraint": [[20, "module-dbldatagen.constraints.literal_relation_constraint"]], "negativevalues (class in dbldatagen.constraints.negative_values)": [[21, "dbldatagen.constraints.negative_values.NegativeValues"]], "dbldatagen.constraints.negative_values": [[21, "module-dbldatagen.constraints.negative_values"]], "positivevalues (class in dbldatagen.constraints.positive_values)": [[22, "dbldatagen.constraints.positive_values.PositiveValues"]], "dbldatagen.constraints.positive_values": [[22, "module-dbldatagen.constraints.positive_values"]], "rangedvalues (class in dbldatagen.constraints.ranged_values_constraint)": [[23, "dbldatagen.constraints.ranged_values_constraint.RangedValues"]], "dbldatagen.constraints.ranged_values_constraint": [[23, "module-dbldatagen.constraints.ranged_values_constraint"]], "sqlexpr (class in dbldatagen.constraints.sql_expr)": [[24, "dbldatagen.constraints.sql_expr.SqlExpr"]], "dbldatagen.constraints.sql_expr": [[24, "module-dbldatagen.constraints.sql_expr"]], "uniquecombinations (class in dbldatagen.constraints.unique_combinations)": [[25, "dbldatagen.constraints.unique_combinations.UniqueCombinations"]], "dbldatagen.constraints.unique_combinations": [[25, "module-dbldatagen.constraints.unique_combinations"]], "preparedatagenerator() (uniquecombinations method)": [[25, "dbldatagen.constraints.unique_combinations.UniqueCombinations.prepareDataGenerator"]], "transformdataframe() (uniquecombinations method)": [[25, "dbldatagen.constraints.unique_combinations.UniqueCombinations.transformDataframe"]], "dataanalyzer (class in dbldatagen.data_analyzer)": [[26, "dbldatagen.data_analyzer.DataAnalyzer"]], "dbldatagen.data_analyzer": [[26, "module-dbldatagen.data_analyzer"]], "scriptdatageneratorfromdata() (dataanalyzer method)": [[26, "dbldatagen.data_analyzer.DataAnalyzer.scriptDataGeneratorFromData"]], "scriptdatageneratorfromschema() (dataanalyzer class method)": [[26, "dbldatagen.data_analyzer.DataAnalyzer.scriptDataGeneratorFromSchema"]], "summarize() (dataanalyzer method)": [[26, "dbldatagen.data_analyzer.DataAnalyzer.summarize"]], "summarizetodf() (dataanalyzer method)": [[26, "dbldatagen.data_analyzer.DataAnalyzer.summarizeToDF"]], "datagenerator (class in dbldatagen.data_generator)": [[27, "dbldatagen.data_generator.DataGenerator"]], "build() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.build"]], "build_order (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.build_order"]], "clone() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.clone"]], "computebuildplan() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.computeBuildPlan"]], "dbldatagen.data_generator": [[27, "module-dbldatagen.data_generator"]], "describe() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.describe"]], "explain() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.explain"]], "flatten() (datagenerator static method)": [[27, "dbldatagen.data_generator.DataGenerator.flatten"]], "generatename() (datagenerator class method)": [[27, "dbldatagen.data_generator.DataGenerator.generateName"]], "getcolumnspec() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.getColumnSpec"]], "getcolumntype() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.getColumnType"]], "getinferredcolumnnames() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.getInferredColumnNames"]], "getoutputcolumnnames() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.getOutputColumnNames"]], "getoutputcolumnnamesandtypes() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.getOutputColumnNamesAndTypes"]], "hascolumnspec() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.hasColumnSpec"]], "inferredschema (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.inferredSchema"]], "isfieldexplicitlydefined() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.isFieldExplicitlyDefined"]], "option() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.option"]], "options() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.options"]], "random (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.random"]], "randomseed (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.randomSeed"]], "reset() (datagenerator class method)": [[27, "dbldatagen.data_generator.DataGenerator.reset"]], "rowcount (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.rowCount"]], "schema (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.schema"]], "schemafields (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.schemaFields"]], "scriptmerge() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.scriptMerge"]], "scripttable() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.scriptTable"]], "seedcolumnname (datagenerator property)": [[27, "dbldatagen.data_generator.DataGenerator.seedColumnName"]], "setrowcount() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.setRowCount"]], "useseed() (datagenerator class method)": [[27, "dbldatagen.data_generator.DataGenerator.useSeed"]], "use_seed() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.use_seed"]], "withcolumn() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withColumn"]], "withcolumnspec() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withColumnSpec"]], "withcolumnspecs() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withColumnSpecs"]], "withconstraint() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withConstraint"]], "withconstraints() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withConstraints"]], "withidoutput() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withIdOutput"]], "withrowcount() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withRowCount"]], "withschema() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withSchema"]], "withsqlconstraint() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withSqlConstraint"]], "withstructcolumn() (datagenerator method)": [[27, "dbldatagen.data_generator.DataGenerator.withStructColumn"]], "dbldatagen.datagen_constants": [[28, "module-dbldatagen.datagen_constants"]], "datarange (class in dbldatagen.datarange)": [[29, "dbldatagen.datarange.DataRange"]], "adjustforcolumndatatype() (datarange method)": [[29, "dbldatagen.datarange.DataRange.adjustForColumnDatatype"]], "dbldatagen.datarange": [[29, "module-dbldatagen.datarange"]], "getcontinuousrange() (datarange method)": [[29, "dbldatagen.datarange.DataRange.getContinuousRange"]], "getdiscreterange() (datarange method)": [[29, "dbldatagen.datarange.DataRange.getDiscreteRange"]], "getscale() (datarange method)": [[29, "dbldatagen.datarange.DataRange.getScale"]], "isempty() (datarange method)": [[29, "dbldatagen.datarange.DataRange.isEmpty"]], "isfullypopulated() (datarange method)": [[29, "dbldatagen.datarange.DataRange.isFullyPopulated"]], "max (datarange property)": [[29, "dbldatagen.datarange.DataRange.max"]], "min (datarange property)": [[29, "dbldatagen.datarange.DataRange.min"]], "dbldatagen.datasets": [[30, "module-dbldatagen.datasets"]], "allowed_options (basicgeometriesprovider attribute)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider.ALLOWED_OPTIONS"]], "basicgeometriesprovider (class in dbldatagen.datasets.basic_geometries)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider"]], "column_count (basicgeometriesprovider attribute)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider.COLUMN_COUNT"]], "max_location_id (basicgeometriesprovider attribute)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider.MAX_LOCATION_ID"]], "min_location_id (basicgeometriesprovider attribute)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider.MIN_LOCATION_ID"]], "dbldatagen.datasets.basic_geometries": [[31, "module-dbldatagen.datasets.basic_geometries"]], "gettablegenerator() (basicgeometriesprovider method)": [[31, "dbldatagen.datasets.basic_geometries.BasicGeometriesProvider.getTableGenerator"]], "allowed_options (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.ALLOWED_OPTIONS"]], "basicprocesshistorianprovider (class in dbldatagen.datasets.basic_process_historian)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider"]], "column_count (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.COLUMN_COUNT"]], "default_end_timestamp (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.DEFAULT_END_TIMESTAMP"]], "default_num_devices (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.DEFAULT_NUM_DEVICES"]], "default_num_plants (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.DEFAULT_NUM_PLANTS"]], "default_num_tags (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.DEFAULT_NUM_TAGS"]], "default_start_timestamp (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.DEFAULT_START_TIMESTAMP"]], "max_device_id (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.MAX_DEVICE_ID"]], "max_property_value (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.MAX_PROPERTY_VALUE"]], "min_device_id (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.MIN_DEVICE_ID"]], "min_property_value (basicprocesshistorianprovider attribute)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.MIN_PROPERTY_VALUE"]], "dbldatagen.datasets.basic_process_historian": [[32, "module-dbldatagen.datasets.basic_process_historian"]], "gettablegenerator() (basicprocesshistorianprovider method)": [[32, "dbldatagen.datasets.basic_process_historian.BasicProcessHistorianProvider.getTableGenerator"]], "allowed_options (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.ALLOWED_OPTIONS"]], "basictelematicsprovider (class in dbldatagen.datasets.basic_telematics)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider"]], "column_count (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.COLUMN_COUNT"]], "default_end_timestamp (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_END_TIMESTAMP"]], "default_max_lat (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_MAX_LAT"]], "default_max_lon (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_MAX_LON"]], "default_min_lat (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_MIN_LAT"]], "default_min_lon (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_MIN_LON"]], "default_num_devices (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_NUM_DEVICES"]], "default_start_timestamp (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.DEFAULT_START_TIMESTAMP"]], "max_device_id (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.MAX_DEVICE_ID"]], "min_device_id (basictelematicsprovider attribute)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.MIN_DEVICE_ID"]], "dbldatagen.datasets.basic_telematics": [[33, "module-dbldatagen.datasets.basic_telematics"]], "gettablegenerator() (basictelematicsprovider method)": [[33, "dbldatagen.datasets.basic_telematics.BasicTelematicsProvider.getTableGenerator"]], "basicuserprovider (class in dbldatagen.datasets.basic_user)": [[34, "dbldatagen.datasets.basic_user.BasicUserProvider"]], "column_count (basicuserprovider attribute)": [[34, "dbldatagen.datasets.basic_user.BasicUserProvider.COLUMN_COUNT"]], "max_long (basicuserprovider attribute)": [[34, "dbldatagen.datasets.basic_user.BasicUserProvider.MAX_LONG"]], "dbldatagen.datasets.basic_user": [[34, "module-dbldatagen.datasets.basic_user"]], "gettablegenerator() (basicuserprovider method)": [[34, "dbldatagen.datasets.basic_user.BasicUserProvider.getTableGenerator"]], "allowed_options (benchmarkgroupbyprovider attribute)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.ALLOWED_OPTIONS"]], "benchmarkgroupbyprovider (class in dbldatagen.datasets.benchmark_groupby)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider"]], "column_count (benchmarkgroupbyprovider attribute)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.COLUMN_COUNT"]], "default_num_groups (benchmarkgroupbyprovider attribute)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.DEFAULT_NUM_GROUPS"]], "default_pct_nulls (benchmarkgroupbyprovider attribute)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.DEFAULT_PCT_NULLS"]], "max_long (benchmarkgroupbyprovider attribute)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.MAX_LONG"]], "dbldatagen.datasets.benchmark_groupby": [[35, "module-dbldatagen.datasets.benchmark_groupby"]], "gettablegenerator() (benchmarkgroupbyprovider method)": [[35, "dbldatagen.datasets.benchmark_groupby.BenchmarkGroupByProvider.getTableGenerator"]], "default_partitions (datasetprovider attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DEFAULT_PARTITIONS"]], "default_rows (datasetprovider attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DEFAULT_ROWS"]], "default_table_name (datasetprovider attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DEFAULT_TABLE_NAME"]], "datasetprovider (class in dbldatagen.datasets.dataset_provider)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider"]], "datasetprovider.datasetdecoratorutils (class in dbldatagen.datasets.dataset_provider)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDecoratorUtils"]], "datasetprovider.datasetdefinition (class in dbldatagen.datasets.dataset_provider)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition"]], "datasetprovider.noassociateddatasetsmixin (class in dbldatagen.datasets.dataset_provider)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.NoAssociatedDatasetsMixin"]], "allowed_options() (datasetprovider static method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.allowed_options"]], "associateddatasets (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.associatedDatasets"]], "autocomputepartitions() (datasetprovider method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.autoComputePartitions"]], "checkoptions() (datasetprovider method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.checkOptions"]], "dataset_definition() (in module dbldatagen.datasets.dataset_provider)": [[36, "dbldatagen.datasets.dataset_provider.dataset_definition"]], "dbldatagen.datasets.dataset_provider": [[36, "module-dbldatagen.datasets.dataset_provider"]], "description (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.description"]], "getassociateddataset() (datasetprovider method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getAssociatedDataset"]], "getassociateddataset() (datasetprovider.noassociateddatasetsmixin method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.NoAssociatedDatasetsMixin.getAssociatedDataset"]], "getdatasetdefinition() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getDatasetDefinition"]], "getdatasettables() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getDatasetTables"]], "getregistereddatasets() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getRegisteredDatasets"]], "getregistereddatasetsversion() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getRegisteredDatasetsVersion"]], "gettablegenerator() (datasetprovider method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.getTableGenerator"]], "isvaliddataprovidertype() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.isValidDataProviderType"]], "mkclass() (datasetprovider.datasetdecoratorutils method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDecoratorUtils.mkClass"]], "name (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.name"]], "primarytable (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.primaryTable"]], "providerclass (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.providerClass"]], "registerdataset() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.registerDataset"]], "summary (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.summary"]], "supportsstreaming (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.supportsStreaming"]], "tables (datasetprovider.datasetdefinition attribute)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.DatasetDefinition.tables"]], "unregisterdataset() (datasetprovider class method)": [[36, "dbldatagen.datasets.dataset_provider.DatasetProvider.unregisterDataset"]], "customer_min_value (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.CUSTOMER_MIN_VALUE"]], "default_avg_events_per_customer (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.DEFAULT_AVG_EVENTS_PER_CUSTOMER"]], "default_num_customers (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.DEFAULT_NUM_CUSTOMERS"]], "default_num_days (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.DEFAULT_NUM_DAYS"]], "default_num_plans (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.DEFAULT_NUM_PLANS"]], "device_min_value (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.DEVICE_MIN_VALUE"]], "max_long (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.MAX_LONG"]], "multitabletelephonyprovider (class in dbldatagen.datasets.multi_table_telephony_provider)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider"]], "plan_min_value (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.PLAN_MIN_VALUE"]], "subscriber_num_min_value (multitabletelephonyprovider attribute)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.SUBSCRIBER_NUM_MIN_VALUE"]], "dbldatagen.datasets.multi_table_telephony_provider": [[37, "module-dbldatagen.datasets.multi_table_telephony_provider"]], "getassociateddataset() (multitabletelephonyprovider method)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.getAssociatedDataset"]], "getcustomers() (multitabletelephonyprovider method)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.getCustomers"]], "getdeviceevents() (multitabletelephonyprovider method)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.getDeviceEvents"]], "getplans() (multitabletelephonyprovider method)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.getPlans"]], "gettablegenerator() (multitabletelephonyprovider method)": [[37, "dbldatagen.datasets.multi_table_telephony_provider.MultiTableTelephonyProvider.getTableGenerator"]], "datasets (class in dbldatagen.datasets_object)": [[38, "dbldatagen.datasets_object.Datasets"]], "datasets.navigatornode (class in dbldatagen.datasets_object)": [[38, "dbldatagen.datasets_object.Datasets.NavigatorNode"]], "addentry() (datasets.navigatornode method)": [[38, "dbldatagen.datasets_object.Datasets.NavigatorNode.addEntry"]], "dbldatagen.datasets_object": [[38, "module-dbldatagen.datasets_object"]], "describe() (datasets class method)": [[38, "dbldatagen.datasets_object.Datasets.describe"]], "find() (datasets.navigatornode method)": [[38, "dbldatagen.datasets_object.Datasets.NavigatorNode.find"]], "get() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.get"]], "getassociateddataset() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.getAssociatedDataset"]], "getcombineddataset() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.getCombinedDataset"]], "getenricheddataset() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.getEnrichedDataset"]], "getproviderdefinitions() (datasets class method)": [[38, "dbldatagen.datasets_object.Datasets.getProviderDefinitions"]], "getsummarydataset() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.getSummaryDataset"]], "getsupportingdataset() (datasets method)": [[38, "dbldatagen.datasets_object.Datasets.getSupportingDataset"]], "isfinal() (datasets.navigatornode method)": [[38, "dbldatagen.datasets_object.Datasets.NavigatorNode.isFinal"]], "list() (datasets class method)": [[38, "dbldatagen.datasets_object.Datasets.list"]], "default_date_format (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_DATE_FORMAT"]], "default_end_date (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_END_DATE"]], "default_end_date_timestamp (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_END_DATE_TIMESTAMP"]], "default_end_timestamp (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_END_TIMESTAMP"]], "default_start_date (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_START_DATE"]], "default_start_date_timestamp (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_START_DATE_TIMESTAMP"]], "default_start_timestamp (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_START_TIMESTAMP"]], "default_utc_ts_format (daterange attribute)": [[39, "dbldatagen.daterange.DateRange.DEFAULT_UTC_TS_FORMAT"]], "daterange (class in dbldatagen.daterange)": [[39, "dbldatagen.daterange.DateRange"]], "adjustforcolumndatatype() (daterange method)": [[39, "dbldatagen.daterange.DateRange.adjustForColumnDatatype"]], "computedaterange() (daterange class method)": [[39, "dbldatagen.daterange.DateRange.computeDateRange"]], "computetimestampintervals() (daterange method)": [[39, "dbldatagen.daterange.DateRange.computeTimestampIntervals"]], "computetimestamprange() (daterange class method)": [[39, "dbldatagen.daterange.DateRange.computeTimestampRange"]], "dbldatagen.daterange": [[39, "module-dbldatagen.daterange"]], "getcontinuousrange() (daterange method)": [[39, "dbldatagen.daterange.DateRange.getContinuousRange"]], "getdiscreterange() (daterange method)": [[39, "dbldatagen.daterange.DateRange.getDiscreteRange"]], "getscale() (daterange method)": [[39, "dbldatagen.daterange.DateRange.getScale"]], "isempty() (daterange method)": [[39, "dbldatagen.daterange.DateRange.isEmpty"]], "isfullypopulated() (daterange method)": [[39, "dbldatagen.daterange.DateRange.isFullyPopulated"]], "parseinterval() (daterange class method)": [[39, "dbldatagen.daterange.DateRange.parseInterval"]], "dbldatagen.distributions": [[40, "module-dbldatagen.distributions"]], "beta (class in dbldatagen.distributions.beta)": [[41, "dbldatagen.distributions.beta.Beta"]], "alpha (beta property)": [[41, "dbldatagen.distributions.beta.Beta.alpha"]], "beta (beta property)": [[41, "dbldatagen.distributions.beta.Beta.beta"]], "beta_func() (beta static method)": [[41, "dbldatagen.distributions.beta.Beta.beta_func"]], "dbldatagen.distributions.beta": [[41, "module-dbldatagen.distributions.beta"]], "generatenormalizeddistributionsample() (beta method)": [[41, "dbldatagen.distributions.beta.Beta.generateNormalizedDistributionSample"]], "datadistribution (class in dbldatagen.distributions.data_distribution)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution"]], "dbldatagen.distributions.data_distribution": [[42, "module-dbldatagen.distributions.data_distribution"]], "generatenormalizeddistributionsample() (datadistribution method)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.generateNormalizedDistributionSample"]], "get_np_random_generator() (datadistribution static method)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.get_np_random_generator"]], "randomseed (datadistribution property)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.randomSeed"]], "rounding (datadistribution property)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.rounding"]], "withrandomseed() (datadistribution method)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.withRandomSeed"]], "withrounding() (datadistribution method)": [[42, "dbldatagen.distributions.data_distribution.DataDistribution.withRounding"]], "exponential (class in dbldatagen.distributions.exponential_distribution)": [[43, "dbldatagen.distributions.exponential_distribution.Exponential"]], "dbldatagen.distributions.exponential_distribution": [[43, "module-dbldatagen.distributions.exponential_distribution"]], "exponential_func() (exponential static method)": [[43, "dbldatagen.distributions.exponential_distribution.Exponential.exponential_func"]], "generatenormalizeddistributionsample() (exponential method)": [[43, "dbldatagen.distributions.exponential_distribution.Exponential.generateNormalizedDistributionSample"]], "rate (exponential property)": [[43, "dbldatagen.distributions.exponential_distribution.Exponential.rate"]], "scale (exponential property)": [[43, "dbldatagen.distributions.exponential_distribution.Exponential.scale"]], "gamma (class in dbldatagen.distributions.gamma)": [[44, "dbldatagen.distributions.gamma.Gamma"]], "dbldatagen.distributions.gamma": [[44, "module-dbldatagen.distributions.gamma"]], "gamma_func() (gamma static method)": [[44, "dbldatagen.distributions.gamma.Gamma.gamma_func"]], "generatenormalizeddistributionsample() (gamma method)": [[44, "dbldatagen.distributions.gamma.Gamma.generateNormalizedDistributionSample"]], "scale (gamma property)": [[44, "dbldatagen.distributions.gamma.Gamma.scale"]], "shape (gamma property)": [[44, "dbldatagen.distributions.gamma.Gamma.shape"]], "normal (class in dbldatagen.distributions.normal_distribution)": [[45, "dbldatagen.distributions.normal_distribution.Normal"]], "dbldatagen.distributions.normal_distribution": [[45, "module-dbldatagen.distributions.normal_distribution"]], "generatenormalizeddistributionsample() (normal method)": [[45, "dbldatagen.distributions.normal_distribution.Normal.generateNormalizedDistributionSample"]], "normal_func() (normal static method)": [[45, "dbldatagen.distributions.normal_distribution.Normal.normal_func"]], "standardnormal() (normal class method)": [[45, "dbldatagen.distributions.normal_distribution.Normal.standardNormal"]], "columngeneratorbuilder (class in dbldatagen.function_builder)": [[46, "dbldatagen.function_builder.ColumnGeneratorBuilder"]], "dbldatagen.function_builder": [[46, "module-dbldatagen.function_builder"]], "mkexprchoicesfn() (columngeneratorbuilder class method)": [[46, "dbldatagen.function_builder.ColumnGeneratorBuilder.mkExprChoicesFn"]], "htmlutils (class in dbldatagen.html_utils)": [[47, "dbldatagen.html_utils.HtmlUtils"]], "dbldatagen.html_utils": [[47, "module-dbldatagen.html_utils"]], "formatcodeashtml() (htmlutils class method)": [[47, "dbldatagen.html_utils.HtmlUtils.formatCodeAsHtml"]], "formattextashtml() (htmlutils class method)": [[47, "dbldatagen.html_utils.HtmlUtils.formatTextAsHtml"]], "nrange (class in dbldatagen.nrange)": [[48, "dbldatagen.nrange.NRange"]], "adjustforcolumndatatype() (nrange method)": [[48, "dbldatagen.nrange.NRange.adjustForColumnDatatype"]], "dbldatagen.nrange": [[48, "module-dbldatagen.nrange"]], "getcontinuousrange() (nrange method)": [[48, "dbldatagen.nrange.NRange.getContinuousRange"]], "getdiscreterange() (nrange method)": [[48, "dbldatagen.nrange.NRange.getDiscreteRange"]], "getscale() (nrange method)": [[48, "dbldatagen.nrange.NRange.getScale"]], "isempty() (nrange method)": [[48, "dbldatagen.nrange.NRange.isEmpty"]], "isfullypopulated() (nrange method)": [[48, "dbldatagen.nrange.NRange.isFullyPopulated"]], "schemaparser (class in dbldatagen.schema_parser)": [[49, "dbldatagen.schema_parser.SchemaParser"]], "columntypefromstring() (schemaparser class method)": [[49, "dbldatagen.schema_parser.SchemaParser.columnTypeFromString"]], "columnsreferencesfromsqlstring() (schemaparser class method)": [[49, "dbldatagen.schema_parser.SchemaParser.columnsReferencesFromSQLString"]], "dbldatagen.schema_parser": [[49, "module-dbldatagen.schema_parser"]], "gettypedefinitionparser() (schemaparser class method)": [[49, "dbldatagen.schema_parser.SchemaParser.getTypeDefinitionParser"]], "parsecreatetable() (schemaparser class method)": [[49, "dbldatagen.schema_parser.SchemaParser.parseCreateTable"]], "sparksingleton (class in dbldatagen.spark_singleton)": [[50, "dbldatagen.spark_singleton.SparkSingleton"]], "dbldatagen.spark_singleton": [[50, "module-dbldatagen.spark_singleton"]], "getinstance() (sparksingleton class method)": [[50, "dbldatagen.spark_singleton.SparkSingleton.getInstance"]], "getlocalinstance() (sparksingleton class method)": [[50, "dbldatagen.spark_singleton.SparkSingleton.getLocalInstance"]], "fakertextfactory (class in dbldatagen.text_generator_plugins)": [[51, "dbldatagen.text_generator_plugins.FakerTextFactory"]], "pyfunctext (class in dbldatagen.text_generator_plugins)": [[51, "dbldatagen.text_generator_plugins.PyfuncText"]], "pyfunctextfactory (class in dbldatagen.text_generator_plugins)": [[51, "dbldatagen.text_generator_plugins.PyfuncTextFactory"]], "dbldatagen.text_generator_plugins": [[51, "module-dbldatagen.text_generator_plugins"]], "fakertext() (in module dbldatagen.text_generator_plugins)": [[51, "dbldatagen.text_generator_plugins.fakerText"]], "pandasgeneratetext() (pyfunctext method)": [[51, "dbldatagen.text_generator_plugins.PyfuncText.pandasGenerateText"]], "withinit() (pyfunctextfactory method)": [[51, "dbldatagen.text_generator_plugins.PyfuncTextFactory.withInit"]], "withinitperbatch() (pyfunctextfactory method)": [[51, "dbldatagen.text_generator_plugins.PyfuncTextFactory.withInitPerBatch"]], "withrootproperty() (pyfunctextfactory method)": [[51, "dbldatagen.text_generator_plugins.PyfuncTextFactory.withRootProperty"]], "iltext (class in dbldatagen.text_generators)": [[52, "dbldatagen.text_generators.ILText"]], "templategenerator (class in dbldatagen.text_generators)": [[52, "dbldatagen.text_generators.TemplateGenerator"]], "textgenerator (class in dbldatagen.text_generators)": [[52, "dbldatagen.text_generators.TextGenerator"]], "classicgeneratetext() (iltext method)": [[52, "dbldatagen.text_generators.ILText.classicGenerateText"]], "classicgeneratetext() (templategenerator method)": [[52, "dbldatagen.text_generators.TemplateGenerator.classicGenerateText"]], "compactnumpytypeforvalues() (textgenerator static method)": [[52, "dbldatagen.text_generators.TextGenerator.compactNumpyTypeForValues"]], "dbldatagen.text_generators": [[52, "module-dbldatagen.text_generators"]], "generatetext() (iltext method)": [[52, "dbldatagen.text_generators.ILText.generateText"]], "getastupleorelse() (textgenerator static method)": [[52, "dbldatagen.text_generators.TextGenerator.getAsTupleOrElse"]], "getnprandomgenerator() (textgenerator method)": [[52, "dbldatagen.text_generators.TextGenerator.getNPRandomGenerator"]], "pandasgeneratetext() (iltext method)": [[52, "dbldatagen.text_generators.ILText.pandasGenerateText"]], "pandasgeneratetext() (templategenerator method)": [[52, "dbldatagen.text_generators.TemplateGenerator.pandasGenerateText"]], "randomseed (textgenerator property)": [[52, "dbldatagen.text_generators.TextGenerator.randomSeed"]], "templates (templategenerator property)": [[52, "dbldatagen.text_generators.TemplateGenerator.templates"]], "withrandomseed() (textgenerator method)": [[52, "dbldatagen.text_generators.TextGenerator.withRandomSeed"]], "datagenerror": [[53, "dbldatagen.utils.DataGenError"]], "coalesce_values() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.coalesce_values"]], "dbldatagen.utils": [[53, "module-dbldatagen.utils"]], "deprecated() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.deprecated"]], "ensure() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.ensure"]], "json_value_from_path() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.json_value_from_path"]], "mkboundslist() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.mkBoundsList"]], "parse_time_interval() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.parse_time_interval"]], "split_list_matching_condition() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.split_list_matching_condition"]], "strip_margins() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.strip_margins"]], "system_time_millis() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.system_time_millis"]], "topologicalsort() (in module dbldatagen.utils)": [[53, "dbldatagen.utils.topologicalSort"]]}})