# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This module defines the ValueBasedPRNG class

The Value Based PRNG (psuedo random number generator) uses the PCG algorithm  to generate repeatable
psuedo random numbers. It achieves excellent statistical performance with small and fast code, and small state size.

More details of the PCG algorithnm can be found here.

https://www.pcg-random.org/index.html

The implementation used here, uses as a numpy array of values to seed different random seeds for each row
so that generating pseudo random sequences across each row of a numpy 2d array are completely repeatable.

This differs from existing Numpy implementations as in existing Numpy random number generators,
each row does not have a separate random seed.

The goal of this implementation is to ensure that the sequence of psuedo-random numbers generated for a given row
are independent of the value of the seed in other rows.

In practice, this makes it ideal for generating repeatable foreign keys for a given primary key.

"""

import numpy as np

class ValueBasedPRNG(object):
    """ Value based psuedo-random number generator designed to generate repeatable random sequences.

        It uses the supplied array `v` to seed each a set of states for generating random numbers in sequences of shape
        where the first dimension is a multiple of the size of the seed array `v`.

        The overall goal is to provide a prng that is replacement for the numpy random number generator where only
        the `integers` method is used.

        Note that by array-like, we mean a list, a numpy array or a numeric value
    """

    _MASK32 = 2 ** 32 - 1  # uint32_t
    _MASK64 = 2 ** 64 - 1  # uint64_t

    def __init__(self, v, shape=None, dtype=None):
        """

        :param v: array-like list of values to seed the number generator
        :param shape: If supplied, indicates that generation should allow for generations of values of supplied shape
        :param dtype: Numpy dtype for generation of random numbers

        If a shape is supplied, it creates sufficient state to allow for generation of the number of values indicated
        by the shape parameter independently. In effect, each row has a separate random generator and each column will
        be generated by using a separate stream.

        This may raise a TypeError if the values cannot be converted to integers.

        If converting from string values, it expects that strings can be converted to ints, and if not
        will raise a ValueError.
        """
        effective_values = np.array(v)  # if v is already numpy array, its a no-op

        if effective_values.dtype not in [ np.int32, np.uint32, np.int64, np.uint64]:
            if np.can_cast(effective_values, np.int64, casting="unsafe"):
                effective_values = effective_values.astype(np.int64, casting="unsafe")
            else:
                raise TypeError("Cant cast values to np.int64")

        self._v = effective_values
        self._dtype = dtype or effective_values.dtype

        # scalars have a numpy shape of ()
        self._shape = shape or effective_values.shape
        self._internal_shape = self._shape

        # internally treat scalars as array of size 1
        if self._v.shape == ():
            self._internal_shape = (1,)

    @property
    def shape(self):
        """get the `shape` attribute"""
        return self._shape

    @property
    def seedValues(self):
        """ Get the values that were used to seed the PRNG"""
        return self._v
        

    def integers(self, low, high=None, size=None, dtype=None, endpoint=False):
        """ Return psuedo-random integers from low (inclusive) to high (exclusive), or if endpoint=True,
            low (inclusive) to high (inclusive).

        :param low:      lowint or array-like of ints. Lowest (signed) integers to be drawn from the distribution
                         (unless high=None, in which case this parameter is 0 and this value is used for high).
        :param high:     highint or array-like of ints, optional. f provided, one above the largest (signed) integer
                         to be drawn from the distribution (see above for behavior if high=None).
                         If array-like, must contain integer values
        :param size:     int or tuple of ints, optional that defines the output shape.
                         If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn.
                         Default is None, in which case the size of the set of values used to initialize the PRNG
                         is used.
        :param dtype:    Desired Numpy dtype of the result. Byteorder must be native. The default value is np.int64
        :param endpoint: If true, sample from the interval [low, high] instead of the default [low, high).
                         Defaults to False
        :return:         ndarray of ints. size-shaped array of random integers from the appropriate distribution,
                         or a single such random int if size not provided.

        """
        low_arr = np.array(low)

        if high is None:
            high_arr = low_arr
            low_arr = np.full(low_arr.shape, 0)
        else:
            high_arr = np.array(high)

        if endpoint:
            high_arr = high_arr + 1

        if np.any(high_arr <= 0):
            raise ValueError("high <= 0")

        return low_arr.reshape(low.shape)
